% \iffalse meta-comment
%
% Copyright (C) 2013-2014 by Geoffrey M. Poore <gpoore@gmail.com>
% Copyright (C) 2010-2011 by Konrad Rudolph <konrad_rudolph@madrat.net>
% ---------------------------------------------------------------------------
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% Additionally, the project may be distributed under the terms of the 3-Clause
% ("New") BSD license:  http://opensource.org/licenses/BSD-3-Clause.
%
% This work has the LPPL maintenance status `maintained'.
%
% The Current Maintainer of this work is Geoffrey M. Poore.
%
% This work consists of the files minted.dtx and minted.ins
% and the derived file minted.sty.
%
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{minted.dtx}
%</driver>
%<*package>
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{minted}[2013/12/21 v2.0-alpha3 ]
%</package>
%<*driver>
\documentclass{ltxdoc}
\DisableCrossrefs
\RecordChanges
%\OnlyDescription
\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{fixltx2e}
\usepackage{lstdoc}
\usepackage{xcolor}
\usepackage[cache, langlinenos]{minted}
\usepackage{courier} % Useful monospace font (= has \bfseries).
\usepackage{textcomp}
\usepackage{microtype}
\usepackage{environ}
\usepackage{hyperref}




\makeatletter

\newcommand{\changestext}{}
\NewEnviron{changelog}[2]{%
    \g@addto@macro\changestext{\item[#1] (#2) \begin{itemize}}%
    \expandafter\g@addto@macro\expandafter\changestext\expandafter{\BODY}%
    \g@addto@macro\changestext{\end{itemize}}%
}
\newcommand{\PrintChangelog}{%
    \addcontentsline{toc}{section}{Version History}
    \section*{Version History}%
    \begin{description}%
    \changestext
    \end{description}%
}

\def\MacroFont{%
  \fontencoding\encodingdefault%
  \fontfamily\ttdefault%
  \fontseries\mddefault%
  \fontshape\updefault%
  \small}

% FIXME This is incredibly hacky and overrides size commands around tt-text.
% But I don't get the font inside the main body to change otherwise. :-(
\let\mintedttold\ttfamily
\def\ttfamily{\mintedttold\fontsize{9}{9}\selectfont}
%
\definecolor{minted@mint}{HTML}{0B610B}
\definecolor{minted@samplebg}{HTML}{F0F0E0}
\colorlet{minted@linkcolor}{minted@mint}
%
\def\PrintDescribeMacro#1{\strut \MacroFont\textcolor{minted@linkcolor}{\string #1\ }}
\let\PrintDescribeEnv\PrintDescribeMacro
\let\PrintMacroName\PrintDescribeMacro
\let\PrintEnvName\PrintDescribeEnv
\def\theCodelineNo{\textcolor{minted@linkcolor}{\sffamily\footnotesize\oldstylenums{\arabic{CodelineNo}}}}
%
\hypersetup{
  pdftitle=The minted package: Highlighted source code in LaTeX,
  pdfauthor=Geoffrey M. Poore,
  pdfsubject={Minted LaTeX package manual},
  allcolors=minted@linkcolor,
}
%
% Shamelessly stolen from http://blog.karssen.org/2009/11/15/a-latex-example-environment/
\newenvironment{example}
  {\VerbatimEnvironment
   \begin{VerbatimOut}[gobble=3]{example.out}}
  {\end{VerbatimOut}%
   \vspace{1ex}%
   \setlength{\parindent}{0pt}%
   \fbox{\begin{minipage}{0.5\linewidth}%
     \inputminted[resetmargins]{latex}{example.out}%
   \end{minipage}%
   \hspace{0.05\linewidth}%
   \begin{minipage}{0.4\linewidth}%
     \input{example.out}%
   \end{minipage}%
   \vspace{1ex}}}

\def\minted@printopt#1(#2) (#3){%
  \leavevmode%
  \marginpar{\raggedleft\texttt{\textcolor{minted@linkcolor}{#1}}\ }%
  \textsf{(#2)}\hfill(default: #3)\\}

\newenvironment{optionlist}{%
  \par%
  \newcommand*\mintednext{}%
  \renewcommand*\item[1][]{%
    \mintednext%
    \renewcommand*\mintednext{\par}%
    \minted@printopt##1%
    \ignorespaces}
  \DeleteShortVerb{\|}%
  \MakeShortVerb{\+}}{%
  \DeleteShortVerb{\+}%
  \MakeShortVerb{\|}%
  \par}

\makeatother

\newcommand{\hide}[1]{}

\setlength{\parindent}{0pt}
\addtolength{\parskip}{0.5\baselineskip}

\begin{document}
\DocInput{minted.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{1973}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
%
% \begin{changelog}{v2.0-beta}{2015/01/??}
% \item Fixed buffer size error caused by using \texttt{cache} with a very large number of files (\#61).
% \item Fixed \texttt{autogobble} bug that caused failure under some operating systems.
% \item Added support for \texttt{escapeinside} (requires Pygments 2.0+; \#38).
% \item Fixed issues with XeTeX and caching (\#40).
% \item The \texttt{upquote} package now works correctly with single quotes when using Pygments 1.6+ (\#34).
% \item Fixed caching incompatibility with Linux and OS X under xelatex (\#18 and \#42).
% \item Fixed \texttt{autogobble} incompatibility with Linux and OS X.
% \item \texttt{\string\mintinline} and derived commands are now robust, via \texttt{\string\newrobustcmd} from \texttt{etoolbox}.
% \item Unused styles are now cleaned up when caching.
% \item Fixed a bug that could interfere with caching (\#24).
% \item Added \texttt{draft} package option (\#39).  This typesets all code using \texttt{fancyvrb}; Pygments is not used.  This trades syntax highlighting for maximum speed in compiling.
% \item Added automatic line breaking with \texttt{breaklines} and related options (\#1).
% \item Fixed a bug with boolean options that needed a False argument to cooperate with \texttt{\string\setminted} (\#48).
% \end{changelog}
%
% \begin{changelog}{v2.0-alpha3}{2013/12/21}
% \item Added \texttt{autogobble} option.  This sends code through Python's \texttt{textwrap.dedent()} to remove common leading whitespace.
% \item Added package option \texttt{cachedir}.  This allows the directory in which cached content is saved to be specified.
% \item Added package option \texttt{outputdir}.  This allows an output directory for temporary files to be specified, so that the package can work with LaTeX's \texttt{-output-directory} command-line option.
% \item The \texttt{kvoptions} package is now required.  It is needed to process key-value package options, such as the new \texttt{cachedir} option.
% \item Many small improvements, including better handling of paths under Windows and improved key system.
% \end{changelog}
%
% \begin{changelog}{v2.0-alpha2}{2013/08/21}
% \item \texttt{\string\DeleteFile} now only deletes files if they do indeed exist.  This eliminates warning messages due to missing files.
% \item Fixed a bug in the definition of \texttt{\string\DeleteFile} for non-Windows systems.
% \item Added support for Pygments option \texttt{stripnl}.
% \item Settings macros that were previously defined globally are now defined locally, so that \texttt{\string\setminted} may be confined by \texttt{\string\begingroup...\string\endgroup} as expected.
% \item Macro definitions for a given style are now loaded only once per document, rather than once per command/environment.  This works even without caching.
% \item A custom script/executable may now be substituted for \texttt{pygmentize} by redefining \texttt{\string\MintedPygmentize}.
% \end{changelog}
%
%
% \begin{changelog}{v2.0alpha}{2013/07/30}
% \item Added the package option \texttt{cache}.  This significantly increases compilation speed by caching old output.  For example, compiling the documentation is around 5x faster.
% \item New inline command \texttt{\string\mintinline}.  Custom versions can be created via \texttt{\string\newmintinline}.  The command works inside other commands (for example, footnotes) in most situations, so long as the percent and hash characters are avoided.
% \item The new \texttt{\string\setminted} command allows options to be specified at the document and language levels.
% \item All extended characters (Unicode, etc.) supported by \texttt{inputenc} now work under the pdfTeX engine.  This involved using \texttt{\string\detokenize} on everything prior to saving.
% \item New package option \texttt{langlinenos} allows line numbering to pick up where it left off for a given language when \texttt{firstnumber=last}.
% \item New options, including \texttt{style}, \texttt{encoding}, \texttt{outencoding}, \texttt{codetagify}, \texttt{keywordcase}, \texttt{texcomments} (same as \texttt{texcl}), \texttt{python3} (for the \texttt{PythonConsoleLexer}), and \texttt{numbers}.
% \item \texttt{\string\usemintedstyle} now takes an optional argument to specify the style for a particular language, and works anywhere in the document.
% \item \texttt{xcolor} is only loaded if \texttt{color} isn't, preventing potential package clashes.
% \end{changelog}
%
% \hide{
% % Need to reformat all this, encorporate \change macros
% \begin{changelog}{1.6}{2010/01/22}
% \item Simpler versioning scheme
% \end{changelog}
%
% \begin{changelog}{0.0.4}{2010/01/08}
% \item Initial version
% \end{changelog}
% }
%
% \GetFileInfo{minted.sty}
%
% \newcommand\pkg[1]{\textsf{#1}}
% \newcommand\app[1]{\textsf{#1}}
%
% \title{The \textcolor{minted@mint}{\pkg{minted}} package:\\Highlighted source code in \LaTeX}
% \author{Geoffrey M.\ Poore \\ \url{gpoore@gmail.com} \\ \href{https://github.com/gpoore/minted}{\texttt{github.com/gpoore/minted}} \\ ~\\ Originally created and maintained (2009-2013) by \\ Konrad Rudolph}
% \date{\fileversion~from \filedate}
%
% \maketitle
%
% \begin{abstract}
%   \noindent\pkg{minted} is a package that facilitates expressive syntax highlighting
%   using the powerful \app{Pygments} library. The package also provides options to
%   customize the highlighted source code output.
% \end{abstract}
%
%
% \section*{Current status}
%
% \pkg{minted} was created in \href{http://stackoverflow.com/questions/1966425/source-code-highlighting-in-latex/1985330#1985330}{2009} by Konrad Rudolph.  Geoffrey Poore agreed to take over \pkg{minted} maintenance in March of 2013, since his \href{https://github.com/gpoore/pythontex}{PythonTeX} package also provides an interface to Pygments.
%
% \pkg{minted} is currently in an alpha release for v2.0.  The goal is to  close all current issues, including those on the old \href{https://code.google.com/p/minted/}{Google Code site}, before the full v2.0 release.  During this time of transition, users who need maximum stability are encouraged to use \pkg{minted} 1.7 or PythonTeX.  The release on CTAN will only be updated once v2.0 stabilizes.
%
% \subsection*{License}
% \href{http://www.latex-project.org/lppl.txt}{LaTeX Project Public License (LPPL)} version 1.3.
%
% Additionally, the project may be distributed under the terms of the 3-Clause
% (``New'') BSD license:  \url{http://opensource.org/licenses/BSD-3-Clause}.
%
% \pagebreak
%
%   \tableofcontents
%
% \fvset{
%   codes={\catcode`\%=9}, ^^A Ignore initial |%|
%   numbersep=5pt,
%   fontsize=\small
% }
% \setlength{\fboxsep}{1ex}
%
% \mbox{}\newpage
% \section{Introduction}
%
%
%
% \pkg{minted} is a package that allows formatting source code in \LaTeX.
% For example:
% \begin{VerbatimOut}[gobble=1]{minted.doc.out}
%   \begin{minted}{language}
%     code
%   \end{minted}
% \end{VerbatimOut}
% \inputminted[gobble=2,frame=lines]{latex}{minted.doc.out}
%
% will highlight a piece of code in a chosen language.
% The display can be customized by a number of arguments and colour schemes.
%
% Unlike some other packages, most notably \pkg{listings}, \pkg{minted} requires
% the installation of additional software, \app{Pygments}.
% This may seem like a disadvantage, but there are also significant advantages.
%
% \app{Pygments} provides superior syntax highlighting compared to conventional packages.
% For example, \pkg{listings} basically only highlights strings, comments and keywords.
% \app{Pygments}, on the other hand, can be completely customized to highlight any kind of token the
% source language might support.
% This might include special formatting sequences inside strings, numbers, different kinds of
% identifiers and exotic constructs such as HTML tags.
%
% Some languages make this especially desirable.
% Consider the following Ruby code as an extreme, but at the same time typical, example:
%
% \begin{minted}[gobble=3, style=trac]{ruby}
%   class Foo
%     def init
%       pi = Math::PI
%       @var = "Pi is approx. #{pi}"
%     end
%   end
% \end{minted}
%
% Here we have four different colors for identifiers (five, if you count keywords) and escapes from
% inside strings, none of which pose a problem for \app{Pygments}.
%
% Additionally, installing \app{Pygments} is actually incredibly easy (see the next section).
%
%
% \section{Installation}
%
% \subsection{Prerequisites}
%
% \app{Pygments} is written in Python, so make sure that you have at Python 2.6 or later installed on your system.  This may be easily checked from the command line:
%
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ python --version
%   Python 2.7.5
% \end{Verbatim}
%
% If you don't have Python installed, you can download it from the \href{http://www.python.org/download/}{Python website} or
% use your operating system's package manager.
%
% Some Python distributions include Pygments (see some of the options under ``Alternative Implementations'' on the Python site).  Otherwise, you will need to install Pygments manually.
%
% This may  be done by installing \href{http://pypi.python.org/pypi/setuptools}{\app{setuptools}}, which facilitates the distribution of Python applications.  You can then install \app{Pygments} using the following command:
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ sudo easy_install Pygments
% \end{Verbatim}
% Under Windows, you will not need the |sudo|, but may need to run the command prompt as administrator.
%
% If you already have \app{Pygments} installed, be aware that a current version is recommended (at least 1.4 or later).  \pkg{minted} may work with versions as early as 1.2, but there are no guarantees.
%
%
% \subsection{Required packages}
%
% \pkg{minted} requires that the following packages be available and reasonably up to date on your system.  All of these ship with recent \TeX\ distributions.
%
% \begingroup
% \setlength\parskip{0pt}
% \setlength\topsep{0pt}
% \begin{list}{\textrm{\labelitemi}}{\ttfamily}
%   \item keyval
%   \item kvoptions
%   \item fancyvrb
%   \item float
%   \item ifthen
%   \item calc
%   \item ifplatform
%   \item pdftexcmds
%   \item etoolbox
%   \item xstring
%   \item xcolor
%   \item lineno
% \end{list}
% \endgroup
%
%
% \subsection{Installing \pkg{minted}}
% \changes{1.7}{2010/03/16}{Installation instructions added}
%
% You can probably install \pkg{minted} with your \TeX\ distributions package manager.  Otherwise, you can install it manually by following the directions below.
%
% If the file |minted.sty| doesn't exist yet, we first have to create it.
% If you're using a system that supports the \app{make} command, then you can simply type the following
% command in the folder where you've extracted the \pkg{minted} package code:
%
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ make
% \end{Verbatim}
%
% Alternatively, you may download this file separately from the
% \href{https://github.com/gpoore/minted}{project's homepage}, or create it manually by
% executing the command
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ tex minted.ins
% \end{Verbatim}
%
% on the command line.
%
% Finally, we have to install the file so that \TeX\ is able to find it.
% In order to do that, please refer to the
% \href{http://www.tex.ac.uk/cgi-bin/texfaq2html?label=inst-wlcf}{\TeX{} FAQ}.
% If you just want to experiment with the latest version, you could locate your current |minted.sty| in your \TeX\ installation and replace it with the latest version.  Or you could just put the latest |minted.sty| in the same directory as the file you wish to use it with.
%
%
%
% \section{Basic usage}
%
% \subsection{Preliminary}
%
% Since \pkg{minted} makes calls to the outside world (that is, \app{Pygments}), you need to tell the
% \LaTeX{} processor about this by passing it the |-shell-escape| option or it won't allow such calls.
% In effect, instead of calling the processor like this:
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ latex input
% \end{Verbatim}
%
% you need to call it like this:
%
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ latex -shell-escape input
% \end{Verbatim}
%
% The same holds for other processors, such as |pdflatex| or |xelatex|.
%
% You should be aware that using |-shell-escape| allows \LaTeX\ to run potentially arbitrary commands on your system.  It is probably best to use |-shell-escape| only when you need it, and to use only it with documents from trusted sources.
%
%
%
% \subsection{A minimal complete example}
% \changes{1.7}{2010/03/16}{Minimal working example added}
%
% The following file |minimal.tex| shows the basic usage of \pkg{minted}.
%
% \begin{VerbatimOut}[gobble=1]{minted.doc.out}
%   \documentclass{article}
%
%   \usepackage{minted}
%
%   \begin{document}
%   \begin{minted}{c}
%   int main() {
%       printf("hello, world");
%       return 0;
%   }
%   \end{minted}
%   \end{document}
% \end{VerbatimOut}
% \inputminted[gobble=2,frame=lines]{latex}{minted.doc.out}
%
% By compiling the source file like this:
%
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ pdflatex -shell-escape minimal
% \end{Verbatim}
%
% we end up with the following output in |minimal.pdf|:
%
% \hfill
% \colorbox{minted@samplebg}{\begin{minipage}{0.6\textwidth}
%   \inputminted[firstline=7,lastline=10]{c}{minted.doc.out}
% \end{minipage}}
% \hfill\hfill
%
%
% \subsection{Formatting source code}
%
% \DescribeEnv{minted}
% Using \pkg{minted} is straightforward. For example, to highlight some Python source code we might use
% the following code snippet (result on the right):
%
% \begin{example}
%   \begin{minted}{python}
%   def boring(args = None):
%       pass
%   \end{minted}
% \end{example}
%
% Optionally, the environment accepts a number of options in |key=value| notation, which are described
% in more detail below.
%
%
% \DescribeMacro{\mint}
% For a single line of source code, you can alternatively use a shorthand notation:
%
% \begin{example}
%   \mint{python}|import this|
% \end{example}
%
% The code is delimited by a pair of identical characters, similar to how  |\verb| works.  The complete syntax is \cmd\mint\oarg{options}\marg{language}\meta{delim}\meta{code}\meta{delim},
% where the code delimiter can be almost any punctuation character.
% Again, this command supports a number of options described below.
%
% Note that the |\mint| command \textbf{is not for inline use}.  Rather, it is a shortcut for |minted| when only a single line of code is present.  The |\mintinline| command is provided for inline use.
%
%
% \DescribeMacro{\mintinline}
% Code can be typeset inline:
% 
% \begin{example}
%   X\mintinline{python}{print(x**2)}X
% \end{example}
%
% The syntax is  \cmd\mintinline\oarg{options}\marg{language}\meta{delim}\meta{code}\meta{delim}.  The delimiters can be a pair of characters, as for \cmd\mint.  They can also be a matched pair of curly braces, |{}|.
%
% The command has been carefully crafted so that in most cases it will function correctly when used inside other commands.\footnote{For example, \mintinline{latex}{\mintinline} works in footnotes!  The main exception is when the code contains the percent \texttt{\%} and hash \texttt{\#} characters.}
%
% \DescribeMacro{\inputminted}
% Finally, there's the |\inputminted| command to read and format whole files.
% Its syntax is \cmd\inputminted\oarg{options}\marg{language}\marg{filename}.
%
%
% \subsection{Using different styles}
%
% \DescribeMacro{\usemintedstyle}
% Instead of using the default style you may choose another stylesheet provided by \app{Pygments}.  This may be done via the following:
%
% \mint[frame=lines]{latex}/\usemintedstyle{name}/
%
% The full syntax is \cmd\usemintedstyle\oarg{language}\marg{style}.  The style may be set for the document as a whole (no language specified), or only for a particular language.  Note that the style may also be set via \cmd\setminted\ and via the optional argument for each command and environment.\footnote{Version 2.0 added the optional language argument and removed the restriction that the command be used in the preamble.}
%
% To get a list of all available stylesheets, see the online demo at the \href{http://pygments.org/demo/}{Pygments website} or execute the following command on the command line:
%
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ pygmentize -L styles
% \end{Verbatim}
%
%
% Creating your own styles is also easy. Just follow the instructions provided on the
% \href{http://pygments.org/docs/styles/#creating-own-styles}{website}.
%
%
% \subsection{Supported languages}
%
% \app{Pygments} supports over 150 different programming languages, template languages, and other markup languages.  To see an exhaustive list of the currently supported languages, use the command
%
% \begin{Verbatim}[gobble=3,commandchars=\\\{\}]
%   \$ pygmentize -L lexers
% \end{Verbatim}
%
%
% \section{Floating listings}\label{sec:float}
%
% \DescribeEnv{listing}
% \pkg{minted} provides the |listing| environment to wrap around a source code block.  This puts the code into a floating box.  You can also provide a |\caption| and a |\label| for such a listing in the usual way (that is,
% as for the |table| and |figure| environments):
% \begin{VerbatimOut}[gobble=1]{minted.doc.out}
%   \begin{listing}[H]
%     \mint{cl}/(car (cons 1 '(2)))/
%     \caption{Example of a listing.}
%     \label{lst:example}
%   \end{listing}
%
%   Listing \ref{lst:example} contains an example of a listing.
% \end{VerbatimOut}
% \inputminted[gobble=2,frame=lines]{latex}{minted.doc.out}
%
% will yield:
%
% \hfill
% \colorbox{minted@samplebg}{\begin{minipage}{0.6\textwidth}
%   \input{minted.doc.out}
% \end{minipage}}
% \hfill\hfill
%
% \DescribeMacro{\listoflistings}
% The |\listoflistings| macro will insert a list of all (floated) listings in the document:
%
% \begin{example}
%   \listoflistings
% \end{example}
%
% \DescribeMacro{\listingscaption}
% The string ``Listing'' in a listing's caption can be changed.
% To do this, simply redefine the macro |\listingscaption|, for example:
%
% \mint[frame=lines]{latex}/\renewcommand{\listingscaption}{Program code}/
%
% \DescribeMacro{\listoflistingscaption}
% Likewise, the caption of the listings list, ``List of listings,'' can be changed by redefining
% |\listoflistingscaption|:
%
% \mint[frame=lines]{latex}/\renewcommand{\listoflistingscaption}{List of program codes}/
%
%
% \section{Options}
%
%
% \subsection{Package options}
%
% \DescribeMacro{section}
% \DescribeMacro{chapter}
% To control how \LaTeX{} counts the |listing| floats, you can pass either the
% |section| or |chapter| option when loading the \pkg{minted} package.
% For example, the following will cause listings to be counted by section:
%
% \mint[frame=lines]{latex}/\usepackage[section]{minted}/
%
% \DescribeMacro{cache}
% \pkg{minted} works by saving code to a temporary file, highlighting the code via \app{Pygments} and saving the output to another temporary file, and inputting the output into the \LaTeX\ document.  This process can become quite slow if there are many chunks of code to highlight.  To avoid this, the package provides a |cache| option.
%
% By default, the |cache| option creates a directory |.minted-|\meta{jobname} in the document's root directory.  Files of highlighted code are stored in this directory, so that the code will not have to be highlighted again in the future.  In most cases, caching will significantly speed up document compilation.
%
% Cached files that are no longer in use are automatically deleted.\footnote{This depends on the main auxiliary file not being deleted or becoming corrupted.  If that happens, you could simply delete the cache directory and start over.}
%
% \DescribeMacro{outputdir=\meta{directory}}
%
% The |-output-directory| command-line option for \LaTeX\ causes problems for \pkg{minted}, because the \pkg{minted} temporary files are saved in |<outputdir>|, but \pkg{minted} still looks for them in the document root directory.  There is no way to access the value of the command-line option so that \pkg{minted} can automatically look in the right place.  But it is possible to allow the output directory to be specified manually as a package option.
%
% The output directory should be specified using an absolute path or a path relative to the document root directory.  Paths should use forward spaces, even under Windows.  Paths that include spaces are not allowed.
%
% \DescribeMacro{cachedir=\meta{directory}}
%
% This allows the directory in which cached files are stored to be specified.  Paths should use forward spaces, even under Windows.  Paths that include spaces are not allowed.
%
% Note that this directory is relative to the |outputdir|, if an |outputdir| is specified.
%
% \DescribeMacro{langlinenos}
% \pkg{minted} uses the \pkg{fancyvrb} package behind the scenes for the code typesetting.  \pkg{fancyvrb} provides an option |firstnumber| that allows the starting line number of an environment to be specified.  For convenience, there is an option |firstnumber=last| that allows line numbering to pick up where it left off.  The |langlinenos| option makes |firstnumber| work for each language individually with all |minted| and |\mint| usages.  For example, consider the code and output below.
%
% \begin{VerbatimOut}[gobble=1]{minted.doc.out}
%   \begin{minted}[linenos]{python}
%   def f(x):
%       return x**2
%   \end{minted}
%
%   \begin{minted}[linenos]{ruby}
%   def func
%       puts "message"
%   end
%   \end{minted}
%
%   \begin{minted}[linenos, firstnumber=last]{python}
%   def g(x):
%       return 2*x
%   \end{minted}
% \end{VerbatimOut}
% \inputminted{latex}{minted.doc.out}
% \hfill
% \colorbox{minted@samplebg}{\begin{minipage}{0.6\textwidth}
%   \input{minted.doc.out}
% \end{minipage}}
% \hfill\hfill
%
% Without the |langlinenos| option, the line numbering in the second Python environment would not pick up where the first Python environment left off.
%
%
% \DescribeMacro{draft}
% This uses \pkg{fancyvrb} alone for all typesetting; \app{Pygments} is not used.  This trades syntax highlighting and some other \app{minted} features for faster compiling.  Performance should be essentially the same as using \pkg{fancyvrb} directly; no external temporary files are used.  Note that if you are not changing much code between compiles, the difference in performance between caching and draft mode may be minimal.
%
% Draft mode does not support |autogobble|.  Regular |gobble|, |linenos|, and most other options not related to syntax highlighting will still function in draft mode.
%
% Documents can usually be compiled without shell escape in draft mode.  The \pkg{ifplatform} package may issue a warning about limited functionality due to shell escape being disabled, but this may be ignored in almost all cases.  (Shell escape is only really required if you have an unusual system configuration such that the |\ifwindows| macro must fall back to using shell escape to determine the system.  See the \pkg{ifplatform} documentation for more details:  \url{http://www.ctan.org/pkg/ifplatform}.)
%
% If the |cache| option is set, then all existing cache files will be kept while draft mode is on.  This allows caching to be used intermitently with draft mode without requiring that the cache be completely recreated each time.  Automatic cleanup of cached files will resume as soon as draft mode is turned off.  (This assumes that the auxiliary file has not been deleted in the meantime; it contains the cache history and allows automatic cleanup of unused files.)
%
% \subsection{Macro option usage}
%
% All \pkg{minted} highlighting commands accept the same set of options.
% Options are specified as a comma-separated list of |key=value| pairs.
% For example, we can specify that the lines should be numbered:
%
% \begin{example}
%   \begin{minted}[linenos=true]{c++}
%   #include <iostream>
%   int main() {
%       std::cout << "Hello "
%                 << "world"
%                 << std::endl;
%   }
%   \end{minted}
% \end{example}
%
% An option value of |true| may also be omitted entirely (including the ``|=|'').
% To customize the display of the line numbers further, override the |\theFancyVerbLine| command.
% Consult the \pkg{fancyvrb} documentation for details.
%
% |\mint| accepts the same options:
%
% \begin{example}
%   \mint[linenos]{perl}|$x=~/foo/|
% \end{example}
%
% Here's another example: we want to use the \LaTeX{} math mode inside comments:
%
% \begin{example}
%   \begin{minted}[mathescape]{python}
%   # Returns $\sum_{i=1}^{n}i$
%   def sum_from_one_to(n):
%       r = range(1, n + 1)
%       return sum(r)
%   \end{minted}
% \end{example}
%
% To make your \LaTeX{} code more readable you might want to indent the code inside a |minted|
% environment.
% The option |gobble| removes these unnecessary whitespace characters from the output:
%
% \begin{example}
%   \begin{minted}[gobble=2,
%     showspaces]{python}
%     def boring(args = None):
%         pass
%   \end{minted}
%
%   versus
%
%   \begin{minted}[showspaces]{python}
%     def boring(args = None):
%         pass
%   \end{minted}
% \end{example}
%
% \DescribeMacro{\setminted}
% You may wish to set options for the document as a whole, or for an entire language.  This is possible via \cmd\setminted.  The syntax is
% \cmd\setminted\oarg{language}\marg{key=value,...}.  Language-specific options override document-wide options, which in turn are overridden by individual command and environment options.
%
%
% \subsection{Available options}
%
% \newcommand\appliesto[1]{\textsf{[For #1 only]}}
%
% Following is a full list of available options.
% For more detailed option descriptions please refer to the \pkg{fancyvrb} and \app{Pygments} documentation.
% \begin{optionlist}
%   \item[autogobble (boolean) (+false+)]
%     Remove (gobble) all common leading whitespace from code.  Essentially a version of +gobble+ that automatically determines what should be removed.  Good for code that originally is not indented, but is manually indented after being pasted into a \LaTeX\ document.
%
% \begin{example}
%   ...text.
%   \begin{minted}[autogobble]{python}
%       def f(x):
%           return x**2
%   \end{minted}
% \end{example}
%
%   \item[baselinestretch (+auto+\textbar dimension) (+auto+)]
%     Value to use as for baselinestretch inside the listing.
%   \item[breakautoindent (boolean) (+true+)]
%     When a line is broken, automatically indent the continuation lines to the indentation level of the first line.  When \texttt{breakautoindent} and \texttt{breakindent} are used together, the indentations add.  This  indentation is combined with \texttt{breaksymbolindent} to give the total actual indentation.
%   \item[breakbytoken (boolean) (+false+)]
%     NOT YET IMPLEMENTED. Only automatically break lines at spaces that are not part of tokens.  For example, do not break lines at spaces within strings.  This keeps tokens from being split by automatic line breaks.  This is not compatible with \texttt{draft} mode.  A complete list of Pygments tokens is available at \url{http://pygments.org/docs/tokens/}.
%   \item[breakindent (dimension) (+0pt)]
%     When a line is broken, indent the continuation lines by this amount.  When \texttt{breakautoindent} and \texttt{breakindent} are used together, the indentations add.  This  indentation is combined with \texttt{breaksymbolindent} to give the total actual indentation.
%   \item[breaklines (boolean) (+false+)] 
%     Automatically break long lines in \texttt{minted} environments and \texttt{\string\mint} commands.  Automatic breaks \emph{only} occur at space characters.  By default, the break will be at the space character closest to the margin.  You can prevent space characters within tokens (for example, within strings) from being used as a break location with the option \texttt{breakbytoken} (this is not compatible with \texttt{draft} mode).  If you need breaks at another location, you may use \texttt{escapeinside} to escape to \LaTeX\ and then insert a manual break.  For example, use \texttt{escapeinside=||}, and then insert \texttt{|\textbackslash\textbackslash|} at the appropriate point.  (Note that \texttt{escapeinside} does not work within strings.)
%
%     To customize the indentation of broken lines, see \texttt{breakindent} and \texttt{breakautoindent}.  To customize the line continuation symbol, use \texttt{breaksymbol}.  To customize the separation between the continuation symbol and the code, use \texttt{breaksymbolsep}.  To customize the extra indentation that is supplied around the break symbol, use \texttt{breaksymbolindent}.
%
%     Automatic line breaks are not compatible with \app{Pygments} styles that use a colored backgroup behind large chunks of text.  This coloring is accomplished with \texttt{\string\colorbox}, which cannot break across lines.  It may be possible to create an alternative to \texttt{\string\colorbox} that supports line breaks, perhaps with \pkg{TikZ}, but the author is unaware of a satisfactory solution.  The only current alternative is to redefine \texttt{\string\colorbox} so that it does nothing.  For example,
%\begin{Verbatim}
%\AtBeginEnvironment{minted}{\renewcommand{\colorbox}[3][]{#3}}
%\end{Verbatim}
%     uses the \pkg{etoolbox} package to redefine \texttt{\string\colorbox} within all \texttt{minted} environments.
%
%     Automatic line breaks will not work with \texttt{showspaces=true}.  You may be able to change the definition of \texttt{\string\FV@Space} if you need this; see the \pkg{fancyvrb} implementation for details.
%
%     Automatic breaks are not compatible with the \texttt{frame} option.  You may wish to use \pkg{framed}, \pkg{mdframed}, \pkg{tcolorbox}, or a similar package instead.
%   \item[breaksymbol (string) (+\string\righthookarrow+, $\hookrightarrow$)]
%     The symbol used at the beginning of continuation lines when \texttt{breaklines=true}.  To have no symbol, simply set \texttt{breaksymbol} to an empty string.
%   \item[breaksymbolindent (dimension) (width of 4 characters in teletype font at default point size)]
%     The extra indentation that is provided to make room for \texttt{breaksymbol}.
%   \item[breaksymbolsep (dimension) (+10pt+)]
%     The separation between the \texttt{breaksymbol} and the adjacent code.
%   \item[bgcolor (string) (\emph{none})]
%     Background color of the listing.
%     Notice that the value of this option must \emph{not} be a color command. Instead, it must be a color
%     \emph{name}, given as a string, of a previously-defined color:
%
% \begin{example}
%   \definecolor{bg}{rgb}{0.95,0.95,0.95}
%   \begin{minted}[bgcolor=bg]{php}
%   <?php
%     echo "Hello, $x";
%   ?>
%   \end{minted}
% \end{example}
%
% Unlike the other options, this option is currently only supported for individual commands and environments; there is not support at the language and document-wide levels.
%
% \textbf{This option will prevent environments from breaking across pages.}  If you want support for page breaks and advanced options, you should consider a framing package such as \pkg{framed}, \pkg{mdframed}, or \pkg{tcolorbox}.  It is easy to add framing to \pkg{minted} commands and environments using the \pkg{etoolbox} package.  For example, using \pkg{mdframed}:
%\begin{Verbatim}
%\BeforeBeginEnvironment{minted}{\begin{mdframed}}
%\AfterEndEnvironment{minted}{\end{mdframed}}
%\end{Verbatim}
% Some framing packages also provide built-in commands for such purposes.  For example, \pkg{mdframed} provides a \texttt{\string\surroundwithmdframed} command, which could be used to add a frame to all \texttt{minted} environments:
%\begin{Verbatim}
%\surroundwithmdframed{minted}
%\end{Verbatim}
%   \item[codetagify (list of strings) (highlight +XXX+, +TODO+, +BUG+, and +NOTE+)]
%     Highlight special code tags in comments and docstrings.
%   \item[encoding (string) (system-specific)]
%     Sets the file encoding that \app{Pygments} expects.  See also +outencoding+.
%   \item[escapeinside (string) (\meta{none})]
%   Escape to \LaTeX\ between the two characters specified in \texttt{\string(string\string)}.  All code between the two characters will be interpreted as \LaTeX\ and typeset accordingly.  This allows for additional formatting.  Escaping does not work inside strings and comments (for comments, there is \texttt{texcomments}).  The escape characters need not be identical.  Special \LaTeX\ characters must be escaped when they are used as the escape characters (for example, \texttt{escapeinside=\textbackslash\#\textbackslash\%}).  Requires \app{Pygments} 2.0\string+.
%
% \begin{example}
%   \begin{minted}[escapeinside=||]{py}
%   def f(x):
%       y = x|\colorbox{green}{**}|2
%       return y
%   \end{minted}
% \end{example}
%
%   \item[firstline (integer) (+1+)]
%     The first line to be shown.
%     All lines before that line are ignored and do not appear in the output.
%   \item[firstnumber (+auto+\textbar integer) (+auto+ = 1)]
%     Line number of the first line.
%   \item[fontfamily (family name) (+tt+)]
%     The font family to use.
%     +tt+, +courier+ and +helvetica+ are pre-defined.
%   \item[fontseries (series name) (+auto+ -- the same as the current font)]
%     The font series to use.
%   \item[fontsize (font size) (+auto+ -- the same as the current font)]
%     The size of the font to use, as a size command, e.g. +\footnotesize+.
%   \item[fontshape (font shape) (+auto+ -- the same as the current font)]
%     The font shape to use.
%   \item[formatcom (command) (\emph{none})]
%     A format to execute before printing verbatim text.
%   \item[frame (+none+\textbar +leftline+\textbar +topline+\textbar +bottomline+\textbar +lines+\textbar +single+) (+none+)]
%     The type of frame to put around the source code listing.
%   \item[framerule (dimension) (+0.4pt+)]
%     Width of the frame.
%   \item[framesep (dimension) (\cmd\fboxsep)]
%     Distance between frame and content.
%   \item[funcnamehighlighting (boolean) (+true+)] \appliesto{PHP}
%     If +true+, highlights built-in function names.
%   \item[gobble (integer) (+0+)]
%     Remove the first $n$ characters from each input line.
%   \item[keywordcase] (string) (+'lower'+)
%     Changes capitalization of keywords.  Takes +'lower'+, +'upper'+, or +'capitalize'+.
%   \item[label (string) (\emph{empty})]
%     Add a label to the top, the bottom or both of the frames around the code.
%     See the \pkg{fancyvrb} documentation for more information and examples.
%     \emph{Note:} This does \emph{not} add a +\label+ to the current listing.
%     To achieve that, use a floating environment (section \ref{sec:float}) instead.
%   \item[labelposition (+none+\textbar +topline+\textbar +bottomline+\textbar +all+) (+topline+, +all+ or \emph{none})]
%     Position where to print the label (see above;  default: +topline+ if one label is defined, +all+ if two are defined, \emph{none} else).
%     See the \pkg{fancyvrb} documentation for more information.
%   \item[lastline (integer) (\emph{last line of input})]
%     The last line to be shown.
%   \item[linenos (boolean) (+false+)]
%     Enables line numbers.
%     In order to customize the display style of line numbers, you need to redefine the +\theFancyVerbLine+
%     macro:
%
% \begin{example}
%   \renewcommand{\theFancyVerbLine}{\sffamily
%     \textcolor[rgb]{0.5,0.5,1.0}{\scriptsize
%     \oldstylenums{\arabic{FancyVerbLine}}}}
%
%   \begin{minted}[linenos,
%     firstnumber=11]{python}
%   def all(iterable):
%       for i in iterable:
%           if not i: 
%               return False
%       return True
%   \end{minted}
% \end{example}
%
%   \item[numbers (+left+\textbar+right+) (\emph{none})]
%     Essentially the same as +linenos+, except the side on which the numbers appear may be specified.
%   \item[mathescape (boolean) (+false+)]
%     Enable \LaTeX{} math mode inside comments.
%     Do \emph{not} use spaces inside math mode---they will be rendered like other full-width verbatim spaces.
%     Usage as in package \pkg{listings}.
%   \item[numberblanklines (boolean) (+true+)]
%     Enables or disables numbering of blank lines.
%   \item[numbersep (dimension) (+12pt+)]
%     Gap between numbers and start of line.
%   \item[obeytabs (boolean) (+false+)]
%     Treat tabs as tabs instead of converting them to spaces.
%   \item[outencoding (string) (system-specific)]
%     Sets the file encoding that \app{Pygments} uses for highlighted output.  Overrides any encoding previously set via +encoding+.
%   \item[python3 (boolean) (+false+)] \appliesto{PythonConsoleLexer}
%     Specifies whether Python 3 highlighting is applied.
%   \item[resetmargins (boolean) (+false+)]
%     Resets the left margin inside other environments.
%   \item[rulecolor (color command) (\emph{black})]
%     The color of the frame.
%   \item[samepage (boolean) (+false+)]
%     Forces the whole listing to appear on the same page, even if it doesn't fit.
%   \item[showspaces (boolean) (+false+)]
%     Enables visible spaces: \verb*/visible spaces/.
%   \item[showtabs (boolean) (+false+)]
%     Enables visible tabs---only works in combination with +obeytabs+.
%   \item[startinline (boolean) (+false+)] \appliesto{PHP}
%     Specifies that the code starts in PHP mode, i.e. leading +<?php+ is omitted.
%   \item[style] (string) (\emph{default})
%     Sets the stylesheet used by \app{Pygments}.
%   \item[stepnumber (integer) (+1+)]
%     Interval at which line numbers appear.
%   \item[stripnl (boolean) (+true+)]
%     Strip all leading and trailing whitespace from the input.
%   \item[tabsize (integer) (+8+)]
%     The number of spaces a tab is equivalent to.  If +obeytabs+ is \emph{not} active, tabs will be converted into this number of spaces.  If +obeytabs+ is active, tab stops will be set this number of space characters apart.
%   \item[texcl (boolean) (+false+)]
%     Enables \LaTeX{} code inside comments.
%     Usage as in package \pkg{listings}.
%   \item[texcomments (boolean) (+false+)]
%     Enables \LaTeX{} code inside comments.  The newer name for +texcl+.
%   \item[xleftmargin (dimension) (+0+)]
%     Indentation to add before the listing.
%   \item[xrightmargin (dimension) (+0+)]
%     Indentation to add after the listing.
% \end{optionlist}
%
%
% \section{Defining shortcuts}
%
% Large documents with a lot of listings will nonetheless use the same source language and the
% same set of options for most listings.
% Always specifying all options is redundant, a lot to type and makes performing changes hard.
%
% One option is to use \cmd\setminted, but even then you must still specify the language each time.
%
% \pkg{minted} therefore defines a set of commands that lets you define shortcuts for the highlighting commands.
% Each shortcut is specific for one programming language.
%
% \DescribeMacro{\newminted}
% |\newminted| defines a new alias for the |minted| environment:
%
% \begin{example}
%   \newminted{cpp}{gobble=2,linenos}
%
%   \begin{cppcode}
%     template <typename T>
%     T id(T value) {
%         return value;
%     }
%   \end{cppcode}
% \end{example}
%
% If you want to provide extra options on the fly, or override existing default options, you can do that, too:
%
% \begin{example}
%   \newminted{cpp}{gobble=2,linenos}
%
%   \begin{cppcode*}{linenos=false,
%                    frame=single}
%     int const answer = 42;
%   \end{cppcode*}
% \end{example}
%
% Notice the star ``|*|'' behind the environment name---due to restrictions in \pkg{fancyvrb}'s handling
% of options, it is necessary to provide a \emph{separate} environment that accepts options, and the options
% are \emph{not} optional on the starred version of the environment.
%
% The default name of the environment is \meta{language}|code|.
% If this name clashes with another environment or if you want to choose an own name for another reason, you may
% do so by specifying it as the first argument: \cmd\newminted\oarg{environment name}\marg{language}\marg{options}.
%
% \DescribeMacro{\newmint}
% The above macro only defines shortcuts for the |minted| environment.
% The main reason is that the short command form |\mint| often needs different options---at the very least, it
% will generally not use the |gobble| option.
% A shortcut for |\mint| is defined using \cmd\newmint\oarg{macro name}\marg{language}\marg{options}.
% The arguments and usage are identical to |\newminted|.
% If no \meta{macro name} is specified, \meta{language} is used.
%
% \begin{example}
%   \newmint{perl}{showspaces}
%
%   \perl/my $foo = $bar;/
% \end{example}
%
%
% \DescribeMacro{\newmintinline}
% This creates custom versions of \cmd\mintinline.  The syntax is the same as that for \cmd\newmint: \cmd\newmintinline\oarg{macro~name}\marg{language}\marg{options}.  If a \meta{macro~name} is not specified, then the created macro is called |\|\meta{language}|inline|.
%
% \begin{example}
%   \newmintinline{perl}{showspaces}
%
%   X\perlinline/my $foo = $bar;/X
% \end{example}
%
% \DescribeMacro{\newmintedfile}
% This creates custom versions of \cmd\inputminted.  The syntax is
% \begin{center}
% \cmd\newmintedfile\oarg{macro~name}\marg{language}\marg{options}
% \end{center}
% If no \meta{macro name} is given, then the macro is called |\|\meta{language}|file|.
%
%
%
% \section{FAQ and Troubleshooting}
%
% In some cases, \pkg{minted} may not give the desired result due to other document settings that it cannot control.  Common issues are described below, with workarounds or solutions.  You may also wish to search \href{http://tex.stackexchange.com/}{tex.stackexchange.com} or ask a question there, if you are working with \pkg{minted} in a non-typical context.
%
% \begin{itemize}
% \item \textbf{Tilde characters \texttt{\string~} are raised, almost like superscripts.}
% This is a font issue.  You need a different font encoding, possibly with a different font.  Try |\usepackage[T1]{fontenc}|, perhaps with |\usepackage{lmodern}|, or something similar.
%
% \item \textbf{Quotation marks and backticks don't look right.  Backtick characters \texttt{\string`} are appearing as left quotes.  Single quotes are appearing as curly right quotes.}
% This is due to how Pygments outputs \LaTeX\ code, combined with how \LaTeX\ deals with verbatim content.  Try |\usepackage{upquote}|.
%
% \item \textbf{I'm getting errors with Beamer.}  Due to how Beamer treats verbatim content, you may need to use either the |fragile| or |fragile=singleslide| options for frames that contain \pkg{minted} commands and environments.  |fragile=singleslide| works best, but it disables overlays.  |fragile| works by saving the contents of each frame to a temp file and then reusing them.  This approach allows overlays, but will break if you have the string |\end{frame}| at the beginning of a line (for example, in a |minted| environment).  To work around that, you can indent the content of the environment (so that the |\end{frame}| is preceded by one or more spaces) and then use the |gobble| or |autogobble| options to remove the indentation.
%
% \item \textbf{Tabs are eaten by Beamer.}  This is due to how Beamer works with verbatim content.  You are probably using the frame option |fragile|.  Try |fragile=singleslide| if you don't need overlays.  Otherwise, consider using \cmd\inputminted\ or converting the tabs into spaces.
%
% \item \textbf{I'm trying to create several new \pkg{minted} commands/environments, and want them all to have the same settings.  I'm saving the settings in a macro and then using the macro when defining the commands/environments.  But it's failing.}
% This is due to the way that \pkg{keyval} works (\pkg{minted} uses it to manage options). Arguments are not expanded. See \href{http://tex.stackexchange.com/questions/13563/building-keyval-arguments-using-a-macro/13564#13564}{this} and \href{http://tex.stackexchange.com/questions/145363/why-does-includegraphics-varone-vartwo-not-compile/145366#145366}{this} for more information.  It is still possible to do what you want; you just need to expand the options macro before passing it to the commands that create the new commands/environments.  An example is shown below.  The |\expandafter| is the vital part.
%\begin{verbatim}
%\def\args{linenos,frame=single,fontsize=\footnotesize,style=bw}
%
%\newcommand{\makenewmintedfiles}[1]{%
%  \newmintedfile[inputlatex]{latex}{#1}%
%  \newmintedfile[inputc]{c}{#1}%
%}
%
%\expandafter\makenewmintedfiles\expandafter{\args}
%\end{verbatim}
%
% \item \textbf{I want to use \texttt{\string\mintinline} in a context that normally doesn't allow verbatim content.}
% The |\mintinline| command will already work in many places that do not allow normal verbatim commands like |\verb|, so make sure to try it first.  If it doesn't work, one of the simplest alternatives is to save your code in a box, and then use it later.  For example,
%\begin{verbatim}
%\newsavebox\mybox
%\begin{lrbox}{\mybox}
%\mintinline{cpp}{std::cout}
%\end{lrbox}
%
%\commandthatdoesnotlikeverbatim{Text \usebox{\mybox}}
%\end{verbatim}
%
% \item \textbf{Extended characters do not work inside \pkg{minted} commands and environments, even when the \pkg{inputenc} package is used.}
% Version 2.0 adds support for extended characters under the pdfTeX engine.  But if you need characters that are not supported by \pkg{inputenc}, you should use the XeTeX or LuaTeX engines instead.
%
% \item \textbf{The \pkg{polyglossia} package is doing undesirable things to code. (For example, adding extra space around colons in French.)}  You may need to put your code within |\begin{english}...\end{english}|.  This may done for all |minted| environments using \pkg{etoolbox} in the preamble:
% \begin{verbatim}
%\usepackage{etoolbox}
%\BeforeBeginEnvironment{minted}{\begin{english}}
%\AfterEndEnvironment{minted}{\end{english}}
% \end{verbatim}
%
% \item \begin{sloppypar} \textbf{Tabs are being turned into the character sequence \texttt{\string^\string^I}}.
% This happens when you use XeLaTeX.  You need to use the |-8bit| command-line option so that tabs may be written correctly to temporary files.  See \url{http://tex.stackexchange.com/questions/58732/how-to-output-a-tabulation-into-a-file} for more on XeLaTeX's handling of tab characters. \end{sloppypar}
%
% \item \textbf{The \pkg{caption} package produces an error when \texttt{\string\captionof} and other commands are used in combination with \pkg{minted}.}
% Load the \pkg{caption} package with the option |compatibility=false|.
%
% \item \textbf{I need a listing environment that supports page breaks.}  The built-in listing environment is a standard float; it doesn't support page breaks.  You will probably want to define a new environment for long floats.  For example, 
%\begin{verbatim}
%\usepackage{caption}
%\newenvironment{longlisting}{\captionsetup{type=listing}}{}
%\end{verbatim}
% See \url{http://tex.stackexchange.com/a/53540/10742} for more.
%
% \item \textbf{I want to use a custom script/executable to access Pygments, rather than |pygmentize|.}  Redefine |\MintedPygmentize|:
%\begin{verbatim}
%\renewcommand{\MintedPygmentize}{...}
%\end{verbatim}
%
% \item \textbf{I want to use the command-line option \texttt{-output-directory}, or MiKTeX's \texttt{-aux-directory}, but am getting errors.}  Use the package option |outputdir| to specify the location of the output directory.  Unfortunately, there is no way for \pkg{minted} to detect the output directory automatically.
%
% \item \textbf{I want extended characters in labels, but am getting errors.}  This can happen with Python 2.7, due to a \href{https://bitbucket.org/birkenfeld/pygments-main/issue/801/python-2-fails-to-detect-terminal-encoding}{terminal encoding issue with Pygments}.  It should work with Python 3, but you will need to use \pkg{minted} 2.0+ and may have to set the encoding (for example, |\begin{minted}[encoding=utf8,label=...]|).  As a workaround under Python 2.7, you can save the label text in a macro (for example, |\newcommand{\mylabel}{<label>}|), and then pass the macro to \pkg{minted} (|\begin{minted}[label=\mylabel,...]|).  You will still need \pkg{minted} 2.0+ and may need to specify the encoding.
%
% \item \textbf{I want automatic line breaks for long lines in environments.}  This may not be advisable for several reasons.  First, automatic line breaks will usually be far inferior to manual line breaks, unless the line-breaking algorithm knows something about the language and its (or your) indentation conventions.  Second, even if the line breaking is acceptable, it will typically have to occur at the space nearest the margin.  So long lines of code with no spaces may not be broken, and things like quoted strings may be split in the middle.  Third, code that uses automatic line breaks must have a symbol near the left-hand side of the page that indicates which lines are continued (for example, $\Rightarrow$), because the line breaks may be in places that would make the code invalid.  The continuation symbol will make it harder for readers to copy-and-paste code from a PDF.  It will also leave less room for the inclusion of line numbers or frames.
%
% If you nevertheless insist on automatic line breaks, you may wish to consult \url{http://tex.stackexchange.com/questions/112559/box-around-minted-environment/112573#112573}.  Note that this solution fails when code is indented (\url{http://tex.stackexchange.com/questions/129383/break-lines-in-minted-code}).
%
% You may also wish to experiment with the following snippets, which were inspired by the links above.  Due to the many difficulties associated with automatic line breaking, this code is not included in the \pkg{minted} package.  While the code may be suitable for some purposes, it will likely require tweaking in many situations.  Margins especially may require adjustment.
%
% The following code causes long lines to wrap around onto the next line, \textbf{without} any indentation or continuation symbol.
% \begin{verbatim}
%\newsavebox\FancyVerbLineBox
%\renewcommand{\FancyVerbFormatLine}[1]{%
%  \begingroup
%  \parindent0pt
%  \setbox\FancyVerbLineBox=\vbox\bgroup
%    \strut #1\strut
%  \egroup
%  \usebox{\FancyVerbLineBox}%
%  \endgroup
%}
% \end{verbatim}
%
% The next example is more advanced, inserting a continuation symbol and adding additional indentation to all code to prevent it from overlapping line numbers.  It requires the \pkg{lineno} package.
% \begin{verbatim}
%\newsavebox\FancyVerbLineBox
%\renewcommand{\FancyVerbFormatLine}[1]{%
%  \begingroup
%  \hsize=\linewidth
%  \parindent0pt
%  \setcounter{linenumber}{1}%
%  \renewcommand{\thelinenumber}{%
%    \ifnum\value{linenumber}=1\relax\else
%      \strut$\Rightarrow$\strut
%    \fi}%
%  \advance\hsize by -2em
%  \setbox\FancyVerbLineBox=\vbox\bgroup
%    \begin{internallinenumbers}%
%    \strut #1\strut
%    \end{internallinenumbers}%
%  \egroup
%  \hspace{2em}\usebox{\FancyVerbLineBox}%
%  \endgroup
%}
% \end{verbatim}
%
% 
% \end{itemize}
%
%
%
%
% \section*{Acknowledgements}
%
% Konrad Rudolph:  Special thanks to Philipp Stephani and the rest of the guys from \url{comp.text.tex} and \url{tex.stackexchange.com}.
%
% Geoffrey Poore:  Thanks to Marco Daniel for the code on \url{tex.stackexchange.com} that inspired automatic line breaking.
%
% \PrintChangelog
%
% \StopEventually{}
%
%
% \section{Implementation}
%
% \iffalse
%<*package>
% \fi
%
%
% \subsection{Required packages}
% Load required packages.  For compatibility reasons, most old functionality should be supported with the original set of packages.  More recently added packages, such as |etoolbox| and |xstring|, should only be used for new features when possible.
%    \begin{macrocode}
\RequirePackage{keyval}
\RequirePackage{kvoptions}
\RequirePackage{fancyvrb}
\RequirePackage{float}
\RequirePackage{ifthen}
\RequirePackage{calc}
\RequirePackage{ifplatform}
\RequirePackage{pdftexcmds}
\RequirePackage{etoolbox}
\RequirePackage{xstring}
\RequirePackage{lineno}
%    \end{macrocode}
%
% Make sure that either |color| or |xcolor| is loaded.
%    \begin{macrocode}
\AtBeginDocument{\@ifpackageloaded{color}{}{\RequirePackage{xcolor}}}
%    \end{macrocode}
%
%
%
% \subsection{Package options}
%
%
% \changes{1.7}{2011/09/12}{Options for float placement added}
%
% \begin{macro}{\minted@float@within}
%
% Define an option that controls the section numbering of the |listing| float.
%
%    \begin{macrocode}
\DeclareVoidOption{chapter}{\def\minted@float@within{chapter}}
\DeclareVoidOption{section}{\def\minted@float@within{section}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{minted@cache}
% Define an option that determines whether highlighted content is cached.  We use a boolean to keep track of its state.
%    \begin{macrocode}
\newboolean{minted@cache}
\DeclareVoidOption{cache}{%
  \minted@cachetrue
  \AtEndOfPackage{\ProvideDirectory{\minted@outputdir\minted@cachedir}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@cachedir}
% Set the directory in which cached content is saved.  The default uses a |.minted-| prefix followed by a sanitized |\jobname| (spaces and asterisks replaced).
%    \begin{macrocode}
\StrSubstitute{\jobname}{ }{_}[\minted@jobname]
\StrSubstitute{\minted@jobname}{"}{}[\minted@jobname]
\StrSubstitute{\minted@jobname}{*}{-}[\minted@jobname]
\newcommand{\minted@cachedir}{.minted-\minted@jobname}
\let\minted@cachedir@windows\minted@cachedir
\define@key{minted}{cachedir}{%
  \@namedef{minted@cachedir}{#1}%
  \StrSubstitute{\minted@cachedir}{/}{\@backslashchar}[\minted@cachedir@windows]}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@outputdir}
% The |-output-directory| command-line option for \LaTeX\ causes problems for \pkg{minted}, because the \pkg{minted} temporary files are saved in the output directory, but \pkg{minted} still looks for them in the document root directory.  There is no way to access the value of the command-line option.  But it is possible to allow the output directory to be specified manually as a package option.
%    \begin{macrocode}
\let\minted@outputdir\@empty
\let\minted@outputdir@windows\@empty
\define@key{minted}{outputdir}{%
  \@namedef{minted@outputdir}{#1/}%
  \StrSubstitute{\minted@outputdir}{/}%
    {\@backslashchar}[\minted@outputdir@windows]}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{langlinenos}
% Define an option that makes all |minted| environments and |\mint| commands for a given language share cumulative line numbering (if |firstnumber=last|).
%    \begin{macrocode}
\newboolean{minted@langlinenos}
\DeclareVoidOption{langlinenos}{\minted@langlinenostrue}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{draft}
% Define an option that allows \pkg{fancyvrb} to do all typesetting directly, without using \app{Pygments}.  This trades syntax highlighting for speed.  Note that in many cases, the difference in performance between caching and draft mode will be minimal.
%    \begin{macrocode}
\DeclareBoolOption{draft}
%    \end{macrocode}
% \end{macro}
%
%
% Process package options.
%
%    \begin{macrocode}
\ProcessKeyvalOptions*
%    \end{macrocode}
%
%
%
% \subsection{Caching and temp files}
% 
% \begin{macro}{\minted@infile}
% Define a default name for files of highlighted content that are brought it.  Caching will redefine this.  We start out with the default, non-caching value.
%    \begin{macrocode}
\newcommand{\minted@infile}{\jobname.out.pyg}
%    \end{macrocode}
% \end{macro}
%
%
% We need a way to track the cache files that are created, and delete those that are not in use.
%
% \begin{macro}{\minted@cachefiles}
% This is a list of the current cache files.
%    \begin{macrocode}
\newcommand{\minted@cachefiles}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\minted@addcachefile}
% This adds a file to the list of cache files.  It also creates a macro involving the hash, so that the current usage of the hash can be easily checked.
%    \begin{macrocode}
\newcommand{\minted@addcachefile}[1]{%
  \expandafter\gdef\expandafter\minted@cachefiles\expandafter{%
    \minted@cachefiles,%
    #1}%
  \expandafter\gdef\csname minted@current@#1\endcsname{}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@savecachefiles}
%
% We need to be able to save the list of cache files to the |.aux| file, so that we can reload it on the next run.
%    \begin{macrocode}
\newcommand{\minted@savecachefiles}{%
  \immediate\write\@mainaux{%
    \string\gdef\string\minted@oldcachefiles\string{%
      \minted@cachefiles\string}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@cleancache}
% Clean up old cache files that are no longer in use.
%    \begin{macrocode}
\newcommand{\minted@cleancache}{%
  \ifthenelse{\boolean{minted@cache}}{%
    \ifcsname minted@oldcachefiles\endcsname
      \def\do##1{%
        \ifthenelse{\equal{##1}{}}{}{%
          \ifcsname minted@current@##1\endcsname\else
            \DeleteFile[\minted@outputdir\minted@cachedir]{##1}%
          \fi
        }%
      }%
      \expandafter\docsvlist\expandafter{\minted@oldcachefiles}%
    \else
    \fi
  }{}%
}
%    \end{macrocode}
% \end{macro}
%
%
% At the end of the document, save the list of cache files and clean the cache.  If in draft mode, don't clean up the cache and save the current cache file list for next time.
%    \begin{macrocode}
\ifthenelse{\boolean{minted@cache}}%
  {\AtEndDocument{%
    \ifthenelse{\boolean{minted@draft}}%
      {\ifcsname minted@oldcachefiles\endcsname
        \let\minted@cachefiles\minted@oldcachefiles
        \minted@savecachefiles
        \fi}%
      {\minted@savecachefiles
        \minted@cleancache}}%
  }%
  {}%
%    \end{macrocode}
%
%
%
% \subsection{OS interaction}
%
% \changes{1.6}{2010/01/27}{Windows support added}
%
% We need system-dependent macros for communicating with the ``outside world.''
%
% \begin{macro}{\DeleteFile}
% \changes{2.0}{2013/07/27}{Added quotation marks to support file names with spaces.}
%
% Delete a file.  Define conditionally in case an equivalent macro has already been defined.
%
%    \begin{macrocode}
\ifwindows
  \providecommand{\DeleteFile}[2][]{%
    \ifthenelse{\equal{#1}{}}%
      {\IfFileExists{#2}{\immediate\write18{del "#2"}}{}}%
      {\IfFileExists{#1/#2}{%
        \StrSubstitute{#1}{/}{\@backslashchar}[\minted@windir]
        \immediate\write18{del "\minted@windir\@backslashchar #2"}}{}}}
\else
  \providecommand{\DeleteFile}[2][]{%
    \ifthenelse{\equal{#1}{}}%
      {\IfFileExists{#2}{\immediate\write18{rm "#2"}}{}}%
      {\IfFileExists{#1/#2}{\immediate\write18{rm "#1/#2"}}{}}}
\fi
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\ProvideDirectory}
%
% We need to be able to create a directory, if it doesn't already exist.  This is primarily for storing cached highlighted content.
%
%    \begin{macrocode}
\ifwindows
  \newcommand{\ProvideDirectory}[1]{%
    \StrSubstitute{#1}{/}{\@backslashchar}[\minted@windir]
    \immediate\write18{if not exist "\minted@windir" mkdir "\minted@windir"}}
\else
  \newcommand{\ProvideDirectory}[1]{%
    \immediate\write18{mkdir -p "#1"}}
\fi
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\TestAppExists}
%
% Determine whether a given application exists.
%
% Usage is a bit roundabout, but has been retained for backward compatibility. To test whether an application exists, use the following code:
%
% \begin{Verbatim}
%\TestAppExists{appname}
%\ifthenelse{\boolean{AppExists}}{app exists}{app doesn't exist}
% \end{Verbatim}
%
%    \begin{macrocode}
\newboolean{AppExists}
\newread\minted@appexistsfile
\newcommand{\TestAppExists}[1]{
  \ifwindows
%    \end{macrocode}
%
% On Windows, we need to use path expansion and write the result to a file.
% If the application doesn't exist, the file will be empty (except for a newline);
% otherwise, it will contain the full path of the application.
%
%    \begin{macrocode}
    \DeleteFile{\jobname.aex}
    \immediate\write18{for \string^\@percentchar i in (#1.exe #1.bat #1.cmd)
      do set >\jobname.aex <nul: /p 
      x=\string^\@percentchar \string~$PATH:i>>\jobname.aex}
    %$ <- balance syntax highlighting
    \immediate\openin\minted@appexistsfile\jobname.aex
    \expandafter\def\expandafter\@tmp@cr\expandafter{\the\endlinechar}
    \endlinechar=-1\relax
    \readline\minted@appexistsfile to \minted@apppathifexists
    \endlinechar=\@tmp@cr
    \ifthenelse{\equal{\minted@apppathifexists}{}}
     {\AppExistsfalse}
     {\AppExiststrue}
    \immediate\closein\minted@appexistsfile
    \DeleteFile{\jobname.aex}
    \immediate\typeout{file deleted}
  \else
%    \end{macrocode}
%
% On Unix-like systems, we do a straightforward |which| test and create a file upon success, whose existence we can then check.
%
% \changes{1.7}{2010/02/16}{Removed unportable flag from Unix shell command}
%
%    \begin{macrocode}
    \immediate\write18{which #1 && touch \jobname.aex}
    \IfFileExists{\jobname.aex}
      {\AppExiststrue
        \DeleteFile{\jobname.aex}}
      {\AppExistsfalse}
  \fi
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Option processing}
% \changes{2.0}{2013/07/27}{Redid options at global, language, and command levels}
%
% We need macros for storing options that will later be passed to the command line.  These are defined at the global (|g|), language (|lang|), and command or environment (|cmd|) levels, so that settings can be specified at various levels of hierarchy.  The language macro is actually a placeholder.  Each individual language will create a |\minted@optlang|\meta{language} macro.  The current language will be tracked using |\minted@lang|.
%
% \begin{macro}{\minted@optg}
%    \begin{macrocode}
\newcommand{\minted@optg}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\minted@lang}
%    \begin{macrocode}
\let\minted@lang\@empty
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\minted@optlang}
%    \begin{macrocode}
\newcommand{\minted@optlang}{}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\minted@optcmd}
%    \begin{macrocode}
\newcommand{\minted@optcmd}{}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@checklang}
% We need a way to check whether a language has had all its option macros created.
%    \begin{macrocode}
\newcommand{\minted@checklang}{%
  \ifcsname minted@optlang\minted@lang\endcsname\else
    \expandafter\def\csname minted@optlang\minted@lang\endcsname{}%
  \fi
  \ifcsname minted@optlang\minted@lang @extra\endcsname\else
    \expandafter\def\csname minted@optlang\minted@lang @extra\endcsname{}%
  \fi
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@resetoptcmd}
% We need a macro that will reset command-level options to null values.  This macro will be redefined as command-level options are specified, in such a way that the next time it is used it will reset all options to null values.  An equivalent at the global and command levels is not provided, since those options should persist.
%
% It is convenient always to reset the |extra| options, given the number of |extra| options and the proportional inconvenience of always having to check whether they have been added to the reset list.
%
% The |autogobble| at the command level needs to be reset separately since it is not a standard option.
%    \begin{macrocode}
\newcommand{\minted@resetoptcmd}{%
  \@namedef{minted@optcmd@extra}{}%
  \let\minted@optcmd@autogobble\relax}
%    \end{macrocode}
% \end{macro}
%
% We need a macro that will retrieve detokenized option values suitable for |\write18|.  We create three versions, one for each level of options.
%
% \begin{macro}{\minted@getoptg}
%    \begin{macrocode}
\newcommand{\minted@getoptg}[1]{%
  \expandafter\detokenize%
  \expandafter\expandafter\expandafter{\csname minted@optg@#1\endcsname}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\minted@getoptlang}
%    \begin{macrocode}
\newcommand{\minted@getoptlang}[1]{%
  \expandafter\detokenize\expandafter\expandafter\expandafter{%
    \csname minted@optlang\minted@lang @#1\endcsname}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\minted@getoptcmd}
%    \begin{macrocode}
\newcommand{\minted@getoptcmd}[1]{%
  \expandafter\detokenize%
  \expandafter\expandafter\expandafter{\csname minted@optcmd@#1\endcsname}}
%    \end{macrocode}
% \end{macro}
%
%
% We need a macro that will register options as having been used (add the options that are in use to the list macro).  As before, we create three versions, one per level.
%
% \begin{macro}{\minted@regoptg}
%    \begin{macrocode}
\newcommand{\minted@regoptg}[1]{%
  \ifcsname minted@optg@#1@reg\endcsname\else
    \expandafter\let\csname minted@optg@#1@reg\endcsname\@empty
    \expandafter\def\expandafter\minted@optg\expandafter{%
      \minted@optg\space\minted@getoptg{#1}}%
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\minted@regoptlang}
%    \begin{macrocode}
\newcommand{\minted@regoptlang}[1]{%
  \ifcsname minted@optlang\minted@lang @#1@reg\endcsname\else
    \ifcsname minted@optlang\minted@lang\endcsname\else
      \expandafter\def\csname minted@optlang\minted@lang\endcsname{}%
    \fi
    \expandafter\let\csname minted@optlang\minted@lang @#1@reg\endcsname\@empty
    \expandafter\let\expandafter\minted@optlang%
      \csname minted@optlang\minted@lang\endcsname
    \expandafter\def\expandafter\minted@optlang\expandafter{%
      \minted@optlang\space\minted@getoptlang{#1}}%
    \expandafter\let\csname minted@optlang\minted@lang\endcsname\minted@optlang
    \let\minted@optlang\@empty
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\minted@regoptcmd}
%    \begin{macrocode}
\newcommand{\minted@regoptcmd}[1]{%
  \ifcsname minted@optcmd@#1@reg\endcsname\else
    \expandafter\let\csname minted@optcmd@#1@reg\endcsname\@empty
    \expandafter\def\expandafter\minted@optcmd\expandafter{%
      \minted@optcmd\space\minted@getoptcmd{#1}}%
    \expandafter\def\expandafter\minted@resetoptcmd\expandafter{%
        \minted@resetoptcmd
        \@namedef{minted@optcmd@#1}{}}%
  \fi
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \begin{macro}{\minted@define@opt}
%
% Define a generic option with an optional default argument.  Options are given in a |{key}{value}| format that is transformed into |key=value| and then passed to pygmentize.  This allows |value| to be easily stored in a separate macro for later access.  This is useful, for example, in separately accessing the value of |encoding| for performing |autogobble|.
%
% If a |key| option is specified without |=value|, the default is assumed.  Options are automatically created at all levels.
%    \begin{macrocode}
\newcommand{\minted@define@opt}[4][]{%
  \ifthenelse{\equal{#1}{}}%
    {\define@key{minted@optg}{#2}{\@namedef{minted@optg@#2}{#3=#4}%
        \@namedef{minted@optg@#2@val}{#4}%
        \minted@regoptg{#2}}%
      \define@key{minted@optlang}{#2}{%
        \@namedef{minted@optlang\minted@lang @#2}{#3=#4}%
        \@namedef{minted@optlang\minted@lang @#2@val}{#4}%
        \minted@regoptlang{#2}}%
      \define@key{minted@optcmd}{#2}{\@namedef{minted@optcmd@#2}{#3=#4}%
        \@namedef{minted@optcmd@#2@val}{#4}%
        \minted@regoptcmd{#2}}}%
    {\define@key{minted@optg}{#2}[#1]{\@namedef{minted@optg@#2}{#3=#4}%
        \@namedef{minted@optg@#2@val}{#4}%
        \minted@regoptg{#2}}%
      \define@key{minted@optlang}{#2}[#1]{%
        \@namedef{minted@optlang\minted@lang @#2}{#3=#4}%
        \@namedef{minted@optlang\minted@lang @#2@val}{#4}%
        \minted@regoptlang{#2}}%
      \define@key{minted@optcmd}{#2}[#1]{\@namedef{minted@optcmd@#2}{#3=#4}%
        \@namedef{minted@optcmd@#2@val}{#4}%
        \minted@regoptcmd{#2}}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@define@opt@escchar}
%
% Define a generic option with an optional default argument, just like |\minted@define@opt|, except that the argument will function correctly when it contains escaped \LaTeX\ characters such as |\#| and |\%|.  This is needed for |escapeinside|, which may take escaped characters but must pass literal unescaped characters to the command line.
%    \begin{macrocode}
\newcommand{\minted@namexdef}[1]{\expandafter\xdef\csname #1\endcsname}
\edef\minted@hashchar{\string#}
\edef\minted@lbracechar{\string{}
\edef\minted@rbracechar{\string}}
\edef\minted@dollarchar{\string$}
\edef\minted@ampchar{\string&}
\edef\minted@uscorechar{\string_}
\newcommand{\minted@bechar}{%
  \begingroup
  \let\#\minted@hashchar
  \let\%\@percentchar
  \let\{\minted@lbracechar
  \let\}\minted@rbracechar
  \let\$\minted@dollarchar
  \let\&\minted@ampchar
  \let\_\minted@uscorechar
}
\newcommand{\minted@eechar}{\endgroup}
\newcommand{\minted@define@opt@escchar}[4][]{%
  \ifthenelse{\equal{#1}{}}%
    {\define@key{minted@optg}{#2}{\minted@bechar%
        \minted@namexdef{minted@optg@#2}{#3=#4}%
        \minted@eechar%
        \@namedef{minted@optg@#2@val}{#4}%
        \minted@regoptg{#2}}%
      \define@key{minted@optlang}{#2}{%
        \minted@bechar%
        \minted@namexdef{minted@optlang\minted@lang @#2}{#3=#4}%
        \minted@eechar%
        \@namedef{minted@optlang\minted@lang @#2@val}{#4}%
        \minted@regoptlang{#2}}%
      \define@key{minted@optcmd}{#2}{\minted@bechar%
        \minted@namexdef{minted@optcmd@#2}{#3=#4}%
        \minted@eechar%
        \@namedef{minted@optcmd@#2@val}{#4}%
        \minted@regoptcmd{#2}}}%
    {\define@key{minted@optg}{#2}[#1]{\minted@bechar%
        \minted@namexdef{minted@optg@#2}{#3=#4}%
        \minted@eechar%
        \@namedef{minted@optg@#2@val}{#4}%
        \minted@regoptg{#2}}%
      \define@key{minted@optlang}{#2}[#1]{%
        \minted@bechar%
        \minted@namexdef{minted@optlang\minted@lang @#2}{#3=#4}%
        \minted@eechar%
        \@namedef{minted@optlang\minted@lang @#2@val}{#4}%
        \minted@regoptlang{#2}}%
      \define@key{minted@optcmd}{#2}[#1]{\minted@bechar%
        \minted@namexdef{minted@optcmd@#2}{#3=#4}%
        \minted@eechar%
        \@namedef{minted@optcmd@#2@val}{#4}%
        \minted@regoptcmd{#2}}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@define@optstyle}
%
% Define an option for styles.  These are defined independently, because styles need to be registered, so that the macros for a given style are only created and inputted once.
%    \begin{macrocode}
\newcommand{\minted@define@optstyle}{%
  \define@key{minted@optg}{style}{%
    \@namedef{minted@optg@style}{-P style=##1 -P commandprefix=PYG##1}%
    \minted@regoptg{style}\minted@regstyle{##1}}%
  \define@key{minted@optlang}{style}{%
    \@namedef{minted@optlang\minted@lang @style}%
      {-P style=##1 -P commandprefix=PYG##1}%
    \minted@regoptlang{style}\minted@regstyle{##1}}%
  \define@key{minted@optcmd}{style}{%
    \@namedef{minted@optcmd@style}{-P style=##1 -P commandprefix=PYG##1}%
    \minted@regoptcmd{style}\minted@regstyle{##1}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@regstyle}
% Register any used styles, and make sure that the definitions are available.
%
% It's important that registration be done with |\def|.  The style macros are |def|ed, so they will be local if included within a group.  We need to make sure that we don't make the mistake of registering a style globally that is actually only available in a group.
%
% We have to do some tricks with |\endlinechar| to prevent |\input| from inserting unwanted whitespace.  That is primarily for inline commands, where it would introduce a line break.  We also patch the single quote macro from Pygments 1.6+ if the \pkg{upquote} package is in use.  The conditionals for the patch definition are borrowed from \pkg{upquote}.  If we are in the preamble, we check for patching twice, once immediately and once at the beginning of the document, so that \pkg{upquote} will be detected even if it is loaded after \pkg{minted}.
%    \begin{macrocode}
\newcommand{\minted@patchZsq}[1]{%
  \ifx\upquote@cmtt\minted@undefined\else
    \ifx\encodingdefault\upquote@OTone
      \ifx\ttdefault\upquote@cmtt
        \expandafter\ifdefstring\expandafter{\csname PYG#1Zsq\endcsname}{\char`\'}%
                {\expandafter\gdef\csname PYG#1Zsq\endcsname{\char13 }}{}%
      \else
        \expandafter\ifdefstring\expandafter{\csname PYG#1Zsq\endcsname}{\char`\'}%
        {\expandafter\gdef\csname PYG#1Zsq\endcsname{\textquotesingle}}{}%
      \fi
    \else
      \expandafter\ifdefstring\expandafter{\csname PYG#1Zsq\endcsname}{\char`\'}%
      {\expandafter\gdef\csname PYG#1Zsq\endcsname{\textquotesingle}}{}%
    \fi
  \fi
}
\newcommand{\minted@regstyle}[1]{%
  \ifcsname minted@stylereg@#1\endcsname\else
    \expandafter\global\expandafter%
      \let\csname minted@stylereg@#1\endcsname\@empty
    \ifthenelse{\boolean{minted@cache}}%
      {\IfFileExists{\minted@outputdir\minted@cachedir/#1.pygstyle}{}{%
        \ifwindows
          \immediate\write18{\MintedPygmentize\space -S #1 -f latex 
            -P commandprefix=PYG#1
            > "\minted@outputdir@windows\minted@cachedir@windows\@backslashchar#1.pygstyle"}%
        \else
          \immediate\write18{\MintedPygmentize\space -S #1 -f latex 
            -P commandprefix=PYG#1
            > "\minted@outputdir\minted@cachedir/#1.pygstyle"}%
        \fi
        }%
        \begingroup
        \let\def\gdef
        \endlinechar=-1\relax
        \input{\minted@outputdir\minted@cachedir/#1.pygstyle}%
        \endgroup
        \minted@addcachefile{#1.pygstyle}}%
      {\ifwindows
          \immediate\write18{\MintedPygmentize\space -S #1 -f latex
            -P commandprefix=PYG#1 > "\minted@outputdir@windows\jobname.out.pyg"}%
        \else
          \immediate\write18{\MintedPygmentize\space -S #1 -f latex
            -P commandprefix=PYG#1 > "\minted@outputdir\jobname.out.pyg"}%
        \fi
        \begingroup
        \let\def\gdef
        \endlinechar=-1\relax
        \input{\minted@outputdir\jobname.out.pyg}%
        \endgroup}%
    \ifx\@onlypreamble\@notprerr
      \minted@patchZsq{#1}%
    \else
      \minted@patchZsq{#1}%
      \AtBeginDocument{\minted@patchZsq{#1}}%
    \fi
  \fi
}
\ifthenelse{\boolean{minted@draft}}{\renewcommand{\minted@regstyle}[1]{}}{}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@define@switch}
%
% Define a switch or boolean option, which is |true| when no value is specified.
%    \begin{macrocode}
\newcommand{\minted@define@switch}[3][]{
  \define@booleankey{minted@optg}{#2}
    {\@namedef{minted@optg@#2}{#3}\minted@regoptg{#2}}
    {\@namedef{minted@optg@#2}{#1}\minted@regoptg{#2}}
  \define@booleankey{minted@optlang}{#2}
    {\@namedef{minted@optlang\minted@lang @#2}{#3}\minted@regoptlang{#2}}
    {\@namedef{minted@optlang\minted@lang @#2}{#1}\minted@regoptlang{#2}}
  \define@booleankey{minted@optcmd}{#2}
    {\@namedef{minted@optcmd@#2}{#3}\minted@regoptcmd{#2}}
    {\@namedef{minted@optcmd@#2}{#1}\minted@regoptcmd{#2}}
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@define@extra}
%
% Extra options are passed on to \pkg{fancyvrb} via Pygments.
%    \begin{macrocode}
\newcommand{\minted@define@extra}[1]{
  \define@key{minted@optg}{#1}{%
    \expandafter\def\expandafter\minted@optg@extra\expandafter{%
      \minted@optg@extra,#1=##1}}
  \@namedef{minted@optg@extra}{}
  \define@key{minted@optlang}{#1}{%
    \ifcsname minted@optlang\minted@lang @extra\endcsname\else
      \expandafter\def\csname minted@optlang\minted@lang @extra\endcsname{}%
    \fi
    \expandafter\let\expandafter\minted@optlang@extra%
      \csname minted@optlang\minted@lang @extra \endcsname
    \expandafter\def\expandafter\minted@optlang@extra\expandafter{%
      \minted@optlang@extra,#1=##1}%
    \expandafter\let\csname minted@optlang\minted@lang @extra\endcsname%
      \minted@optlang@extra
    \let\minted@optlang@extra\@empty}%
  \@namedef{minted@optlang@extra}{}
  \define@key{minted@optcmd}{#1}{%
    \expandafter\def\expandafter\minted@optcmd@extra\expandafter{%
      \minted@optcmd@extra,#1=##1}}
  \@namedef{minted@optcmd@extra}{}
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@define@extra@switch}
%
% Extra switch options are also passed on to \pkg{fancyvrb}.
%    \begin{macrocode}
\newcommand{\minted@define@extra@switch}[1]{
  \define@booleankey{minted@optg}{#1}
    {\expandafter\def\expandafter\minted@optg@extra\expandafter{%
      \minted@optg@extra,#1}}
    {\expandafter\def\expandafter\minted@optg@extra\expandafter{%
      \minted@optg@extra,#1=false}}
  \define@booleankey{minted@optlang}{#1}
    {%
      \ifcsname minted@optlang\minted@lang @extra\endcsname\else
        \expandafter\def\csname minted@optlang\minted@lang @extra\endcsname{}%
      \fi
      \expandafter\let\expandafter\minted@optlang@extra%
        \csname minted@optlang\minted@lang @extra\endcsname
      \expandafter\def\expandafter\minted@optlang@extra\expandafter{%
        \minted@optlang@extra,#1}%
      \expandafter\let\csname minted@optlang\minted@lang @extra\endcsname%
        \minted@optlang@extra
      \let\minted@optlang@extra\@empty}
    {%
      \ifcsname minted@optlang\minted@lang @extra\endcsname\else
        \expandafter\def\csname minted@optlang\minted@lang @extra\endcsname{}%
      \fi
      \expandafter\let\expandafter\minted@optlang@extra%
        \csname minted@optlang\minted@lang @extra\endcsname
      \expandafter\def\expandafter\minted@optlang@extra\expandafter{%
        \minted@optlang@extra,#1=false}%
      \expandafter\let\csname minted@optlang\minted@lang @extra\endcsname%
        \minted@optlang@extra
      \let\minted@optlang@extra\@empty}
  \define@booleankey{minted@optcmd}{#1}
    {\expandafter\def\expandafter\minted@optcmd@extra\expandafter{%
      \minted@optcmd@extra,#1}}
    {\expandafter\def\expandafter\minted@optcmd@extra\expandafter{%
      \minted@optcmd@extra,#1=false}}
}
%    \end{macrocode}
% \end{macro}
%
% \noindent Actual option definitions.  Some of these must be defined conditionally depending on whether we are in |draft| mode; in |draft| mode, all options need to be passed directly to \pkg{fancyvrb} if that is possible.
%
% \changes{0.1.5}{2010/01/10}{Fixed \texttt{firstnumber} option}
% \changes{0.1.5}{2010/01/10}{Added \texttt{fillcolor} option}
% \changes{0.1.5}{2010/01/10}{Removed \texttt{caption} option}
% \changes{1.6}{2010/01/27}{Added font-related options}
% \changes{1.7}{2010/03/14}{Added PHP-specific options}
% \changes{1.7}{2011/01/04}{Added the \texttt{label} option}
% \changes{2.0}{2013/0/27}{Reorganized and added support for tabsize, encoding, outencoding, codetagify, keywordcase, texcomments (not just texcl)}
%
%
% Lexers.
%    \begin{macrocode}
% The following duplicates the `extra' version; any difference? 
%\minted@define@opt{tabsize}{-P tabsize}{#1}
\minted@define@opt{encoding}{-P encoding}{#1}
\minted@define@opt{outencoding}{-P outencoding}{#1}
\minted@define@opt@escchar{escapeinside}{-O escapeinside}{"#1"}
\minted@define@opt{stripnl}{-P stripnl}{#1}
% Python console
\minted@define@switch[-P python3=False]{python3}{-P python3=True}
% PHP
\minted@define@switch[-P funcnamehighlighting=False]%
  {funcnamehighlighting}{-P funcnamehighlighting}
\minted@define@switch[-P startinline=False]{startinline}{-P startinline}
%    \end{macrocode}
%
% Filters.
%    \begin{macrocode}
\ifthenelse{\boolean{minted@draft}}%
  {\minted@define@extra{gobble}}%
  {\minted@define@opt{gobble}{-F gobble:n}{#1}}
\minted@define@opt{codetagify}{-F codetagify:codetags}{#1}
\minted@define@opt{keywordcase}{-F keywordcase:case}{#1}
%    \end{macrocode}
%
% \LaTeX\ formatter.
%    \begin{macrocode}
\minted@define@switch[-P texcomments=False]{texcl}{-P texcomments}
\minted@define@switch[-P texcomments=False]{texcomments}{-P texcomments}
\minted@define@switch[-P mathescape=False]{mathescape}{-P mathescape}
\ifthenelse{\boolean{minted@draft}}%
  {\define@booleankey{FV}{linenos}{\@nameuse{FV@Numbers@left}}{\@nameuse{FV@Numbers@none}}%
    \minted@define@extra@switch{linenos}}%
  {\minted@define@switch[-P linenos=False]{linenos}{-P linenos}}
\minted@define@optstyle
%    \end{macrocode}
%
% \pkg{fancyvrb} (via \LaTeX formatter).
%    \begin{macrocode}
\minted@define@extra{frame}
\minted@define@extra{framesep}
\minted@define@extra{framerule}
\minted@define@extra{rulecolor}
\minted@define@extra{numbersep}
\minted@define@extra{numbers}
\minted@define@extra{firstnumber}
\minted@define@extra{stepnumber}
\minted@define@extra{firstline}
\minted@define@extra{lastline}
\minted@define@extra{baselinestretch}
\minted@define@extra{xleftmargin}
\minted@define@extra{xrightmargin}
\minted@define@extra{fillcolor}
\minted@define@extra{tabsize}
\minted@define@extra{fontfamily}
\minted@define@extra{fontsize}
\minted@define@extra{fontshape}
\minted@define@extra{fontseries}
\minted@define@extra{formatcom}
\minted@define@extra{label}
\minted@define@extra@switch{numberblanklines}
\minted@define@extra@switch{showspaces}
\minted@define@extra@switch{resetmargins}
\minted@define@extra@switch{samepage}
\minted@define@extra@switch{showtabs}
\minted@define@extra@switch{obeytabs}
\minted@define@extra@switch{breaklines}
\minted@define@extra@switch{breakbytoken}
\minted@define@extra{breakindent}
\minted@define@extra@switch{breakautoindent}
\minted@define@extra{breaksymbol}
\minted@define@extra{breaksymbolsep}
\minted@define@extra{breaksymbolindent}
%    \end{macrocode}
%
% |bgcolor|:  The old |bgcolor| is retained for compatibility, but in many cases a dedicated framing package may be preferable.
%    \begin{macrocode}
\let\minted@optcmd@bgcolor\@empty
\define@key{minted@optcmd}{bgcolor}{\@namedef{minted@optcmd@bgcolor}{#1}}
%    \end{macrocode}
%
% Autogobble.  We create options that govern when Python's |textwrap.dedent()| is used to autogobble code.
%
% To begin with, autogobbling requires access to the current encoding, so that Python can read the file correctly before dedenting and writing.
% \begin{macro}{minted@encoding}
% Get the current encoding.
%    \begin{macrocode}
\newcommand{\minted@encoding}{%
  \ifcsname minted@optcmd@encoding@val\endcsname
    \csname minted@optcmd@encoding@val\endcsname
  \else
    \ifcsname minted@optlang\minted@lang @encoding@val\endcsname
      \csname minted@optlang\minted@lang @encoding@val\endcsname
    \else
      \ifcsname minted@optg@encoding@val\endcsname
        \csname minted@optg@encoding@val\endcsname
      \else
        UTF8%
      \fi
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
% 
% Define |autogobble| options.
%    \begin{macrocode}
\define@booleankey{minted@optg}{autogobble}
    {\expandafter\let\csname minted@optg@autogobble\endcsname\@empty}
    {\expandafter\let\csname minted@optg@autogobble\endcsname\relax}
\define@booleankey{minted@optlang}{autogobble}
    {\expandafter\let\csname minted@optlang\minted@lang @autogobble\endcsname\@empty}
    {\expandafter\let\csname minted@optlang\minted@lang @autogobble\endcsname\relax}
\define@booleankey{minted@optcmd}{autogobble}
    {\expandafter\let\csname minted@optcmd@autogobble\endcsname\@empty}
    {\expandafter\let\csname minted@optcmd@autogobble\endcsname\relax}
%    \end{macrocode}
%
% \begin{macro}{minted@autogobble}
% We need a boolean to keep track of whether autogobbling will be performed.
%    \begin{macrocode}
\newboolean{minted@autogobble}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\minted@set@autogobble}
% We need a command to set the |autogobble| boolean.  We have to make sure that all options exist to begin with
%    \begin{macrocode}
\newcommand{\minted@set@autogobble}{%
  \ifcsname minted@optg@autogobble\endcsname\else
    \expandafter\let\csname minted@optg@autogobble\endcsname\relax
  \fi
  \ifcsname minted@optlang\minted@lang @autogobble\endcsname\else
    \expandafter\let\csname minted@optlang\minted@lang @autogobble\endcsname\relax
  \fi
  \ifcsname minted@optcmd@autogobble\endcsname\else
    \expandafter\let\csname minted@optcmd@autogobble\endcsname\relax
  \fi
  \expandafter\ifx\csname minted@optcmd@autogobble\endcsname\@empty
    \setboolean{minted@autogobble}{true}%
  \else
    \expandafter\ifx\csname minted@optlang\minted@lang @autogobble\endcsname\@empty
      \setboolean{minted@autogobble}{true}%
    \else
      \expandafter\ifx\csname minted@optg@autogobble\endcsname\@empty
        \setboolean{minted@autogobble}{true}%
      \else
        \setboolean{minted@autogobble}{false}%
      \fi
    \fi
  \fi
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Additions to \texttt{fancyvrb} (line breaking)}
%
% The following code adds automatic line breaking functionality to \pkg{fancyvrb}.  The code is intentionally written as an extension to \pkg{fancyvrb}, rather than as part of \pkg{minted}, so that eventually it may be separated out into a separate package that extends \pkg{fancyvrb}.
%
% Begin by defining keys, with associated macros, bools, and dimens.
% \begin{macro}{breaklines}
%    \begin{macrocode}
\let\FV@ListProcessLine@Orig\FV@ListProcessLine
\define@booleankey{FV}{breaklines}%
  {\let\FV@ListProcessLine\FV@ListProcessLine@Break}%
  {\let\FV@ListProcessLine\FV@ListProcessLine@Orig}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{breakbytoken}
%    \begin{macrocode}
\define@booleankey{FV}{breakbytoken}%
  {\let\minted@pyghook\minted@pyghook@breakbytoken}%
  {\let\minted@pyghook\minted@pyghook@null}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@BreakIndent}
%    \begin{macrocode}
\newdimen\FV@BreakIndent
\define@key{FV}{breakindent}{\FV@BreakIndent=#1}
\fvset{breakindent=0pt}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{FV@BreakAutoIndent}
%    \begin{macrocode}
\newboolean{FV@BreakAutoIndent}
\define@booleankey{FV}{breakautoindent}%
  {\FV@BreakAutoIndenttrue}{\FV@BreakAutoIndentfalse}
\fvset{breakautoindent=true}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FancyVerbBreakSymbol}
%    \begin{macrocode}
\define@key{FV}{breaksymbol}{\def\FancyVerbBreakSymbol{#1}}
\fvset{breaksymbol=\ensuremath{\hookrightarrow}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@BreakSymbolSep}
%    \begin{macrocode}
\newdimen\FV@BreakSymbolSep
\define@key{FV}{breaksymbolsep}{\FV@BreakSymbolSep=#1}
\fvset{breaksymbolsep=10pt}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@BreakSymbolIndent}
%    \begin{macrocode}
\newdimen\FV@BreakSymbolIndent
\settowidth{\FV@BreakSymbolIndent}{\ttfamily xxxx}
\define@key{FV}{breaksymbolindent}{\FV@BreakSymbolIndent=#1}
%    \end{macrocode}
% \end{macro}
%
% Define helper macros.
% \begin{macro}{\FV@LineBox}
% A box for saving a line of code, so that its dimensions may be determined and thus we may figure out if it needs line breaking.
%    \begin{macrocode}
\newsavebox{\FV@LineBox}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@IndentBox}
% A box for saving the indentation of code, so that its dimensions may be determined for use in autoindentation of continuation lines.
%    \begin{macrocode}
\newsavebox{\FV@IndentBox}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@LinenoBox}
% A box for saving the line number, so that its dimensions may be determined for use in proper spacing
%    \begin{macrocode}
\newsavebox{\FV@LinenoBox}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@LineIndentChars}
% A macro for storing the indentation characters, if any, of a given line.  For use in autoindentation of continuation lines
%    \begin{macrocode}
\let\FV@LineIndentChars\@empty
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FV@GetLineIndent}
% A macro that takes a line and determines the indentation, storing the indentation chars in |\FV@LineIndentChars|.
%    \begin{macrocode}
\def\FV@GetNextChar{\let\FV@NextChar=}
\def\FV@CleanRemainingChars#1\FV@Undefined{}
\def\FV@GetLineIndent{\afterassignment\FV@CheckChar\FV@GetNextChar}
\def\FV@CheckChar{%
  \ifx\FV@NextChar\FV@Undefined
    \let\FV@Next=\relax
  \else
    \expandafter\ifx\FV@NextChar\FV@Space
      \g@addto@macro{\FV@LineIndentChars}{\FV@Space}%
      \let\FV@Next=\FV@GetLineIndent
    \else
      \expandafter\ifx\FV@NextChar\FV@Tab
        \g@addto@macro{\FV@LineIndentChars}{\FV@Tab}%
        \let\FV@Next=\FV@GetLineIndent
      \else
        \let\FV@Next=\FV@CleanRemainingChars
      \fi
    \fi
  \fi
  \FV@Next
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\FancyVerbFormatBreakSymbol}
% A macro that determines exactly how the continuation character will be typeset.
%    \begin{macrocode}
\newcommand{\FancyVerbFormatBreakSymbol}{%
  \ifnum\value{linenumber}=1\relax\else\FancyVerbBreakSymbol\fi}%
%    \end{macrocode}
% \end{macro}
%
% Now for some patching.
% \begin{macro}{\FV@theprevdepth}
% We need to patch the |Verbatim| environment.  Within the environment, we will need to keep track of previously used |\prevdepth| between lines, so as to avoid extra vertical space.  We need to initialize the macro that will keep track of this at the beginning of each environment.  Some additional information about all the |\prevdepth| trickery may be found \href{http://tex.stackexchange.com/questions/34971/how-to-keep-a-constant-baselineskip-when-using-minipages-or-parboxes}{here}.  We also need a particular value of |\lineskip| for the same reason.  Since \pkg{fancyvrb} only specifies a particular |\lineskip| for frames, and |breaklines| already breaks frames, this isn't an issue.
%    \begin{macrocode}
\AtBeginEnvironment{Verbatim}{\lineskip=0pt\xdef\FV@theprevdepth{0pt}}
%    \end{macrocode}
% \end{macro}
%
% And finally the important things.
% \begin{macro}{\FV@ListProcessLine@Break}
% This is the macro that does all the work.  This was inspired by Marco Daniel's code at \url{http://tex.stackexchange.com/a/112573/10742}.
%
% We save the current line in a box, and only do special things if the box is too wide.  We have to make a backup ``copy'' of |\FV@theprevdepth| because we need to redefine it before we are through using it.
%    \begin{macrocode}
%\lineskip=0pt
\def\FV@ListProcessLine@Break#1{%
  \hbox to \hsize{%
  \kern\leftmargin
  \hbox to \linewidth{%
  \sbox{\FV@LineBox}{\FancyVerbFormatLine{#1}}%
  \ifdim\wd\FV@LineBox>\linewidth
    \let\FV@theprevdepth@temp\FV@theprevdepth
    \savebox{\FV@LineBox}{%
      \begingroup
      \vbox{\hsize=\linewidth
        \raggedright
        \prevdepth\FV@theprevdepth
        \leftlinenumbers*
        \setcounter{linenumber}{1}%
        \let\thelinenumber\FancyVerbFormatBreakSymbol
        \begin{internallinenumbers}%
        \linenumbersep=\FV@BreakSymbolSep
        \advance\hsize by -\FV@BreakIndent
        \advance\linewidth by -\FV@BreakIndent
        \noindent\hspace*{-\FV@BreakIndent}%
        \ifdefempty{\FancyVerbBreakSymbol}{}{%
          \advance\hsize by -\FV@BreakSymbolIndent
          \advance\linewidth by -\FV@BreakSymbolIndent
          \hspace*{-\FV@BreakSymbolIndent}}%
        \ifthenelse{\boolean{FV@BreakAutoIndent}}%
          {\let\FV@LineIndentChars\@empty
            \FV@GetLineIndent#1\FV@Undefined
            \savebox{\FV@IndentBox}{\FV@LineIndentChars}%
            \advance\hsize by -\wd\FV@IndentBox
            \advance\linewidth by -\wd\FV@IndentBox
            \hspace*{-\wd\FV@IndentBox}%
          }{}%
        \FancyVerbFormatLine{#1}%
        \end{internallinenumbers}%
        \par\xdef\FV@theprevdepth{\the\prevdepth}}%
        \endgroup
    }%
    \savebox{\FV@LinenoBox}{\FV@LeftListNumber}%
    \vbox to\ht\FV@LineBox{%
      \prevdepth\FV@theprevdepth@temp\FV@LeftListNumber\vfill}%
    \FV@LeftListFrame
    \null\hfill\usebox{\FV@LineBox}\hss
    \FV@RightListFrame
    \vbox to\ht\FV@LineBox{%
      \prevdepth\FV@theprevdepth@temp\FV@RightListNumber\vfill}%
  \else
    \FV@LeftListNumber
    \FV@LeftListFrame
    \vbox{\hsize=\linewidth
      \prevdepth\FV@theprevdepth
      \noindent\FancyVerbFormatLine{#1}%
      \par\xdef\FV@theprevdepth{\the\prevdepth}}\hss
    \FV@RightListFrame
    \FV@RightListNumber
  \fi}%
  \hss}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Internal helpers}
%
% \begin{environment}{\minted@bgbox}
%
% Define an environment that may be wrapped around a |minted| environment to assign a background color.  This is retained as a holdover from version 1.0.  In most cases, it is probably better to use a dedicated framing package, such as \pkg{mdframed} or \pkg{tcolorbox}.
%
% First, we need to define a new save box.
%
%    \begin{macrocode}
\newsavebox{\minted@bgbox}
%    \end{macrocode}
%
% Now we can define the environment that captures a code fragment inside a minipage and applies a background color.
%
%    \begin{macrocode}
\newenvironment{minted@colorbg}[1]{
    %\setlength{\fboxsep}{-\fboxrule}
    \def\minted@bgcol{#1}
    \noindent
    \begin{lrbox}{\minted@bgbox}
    \begin{minipage}{\linewidth-2\fboxsep}}
 {\end{minipage}
    \end{lrbox}%
    \colorbox{\minted@bgcol}{\usebox{\minted@bgbox}}}
%    \end{macrocode}
% \end{environment}
%
%
% \begin{macro}{\minted@code}
% Create a file handle for saving code (and anything else that must be written to temp files).
%    \begin{macrocode}
\newwrite\minted@code
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@savecode}
% \changes{2.0}{2013/07/27}{Added Unicode support}
%
% Save code to be pygmentized to a file.
%    \begin{macrocode}
\newcommand{\minted@savecode}[1]{
  \immediate\openout\minted@code\jobname.pyg\relax
  \immediate\write\minted@code{\expandafter\detokenize\expandafter{#1}}%
  \immediate\closeout\minted@code}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@FVB@VerbatimOut}
% We need a custom version of \pkg{fancyvrb}'s |\FVB@VerbatimOut| that supports Unicode (everything written to file is |\detokenized|).
%    \begin{macrocode}
\newcommand{\minted@write@detok}[1]{%
  \immediate\write\FV@OutFile{\detokenize{#1}}}
\newcommand{\minted@FVB@VerbatimOut}[1]{%
  \@bsphack
  \begingroup
    \FV@UseKeyValues
    \FV@DefineWhiteSpace
    \def\FV@Space{\space}%
    \FV@DefineTabOut
    \let\FV@ProcessLine\minted@write@detok
    \immediate\openout\FV@OutFile #1\relax
    \let\FV@FontScanPrep\relax
    \let\@noligs\relax
    \FV@Scan}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\MintedPygmentize}
% We need a way to customize the executable/script that is called to perform highlighting.  Typically, we will want |pygmentize|.  But advanced users might wish to use a custom Python script instead.
%    \begin{macrocode}
\newcommand{\MintedPygmentize}{pygmentize}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\minted@pygmentize}
%
% Pygmentize a file (default: |\jobname.pyg|) using the options provided.
%
% Unfortunately, the logic for caching is a little complex due to operations that are OS- and engine-dependent.
%
% The name of cached files is the result of concatenating the md5 of the code and the md5 of the command.  This results in a filename that is longer than ideal (64 characters plus path and extension).  Unfortunately, this is the only robust approach that is possible using the built-in pdfTeX hashing capabilities.\footnote{It would be possible to use only the cache of the code, but that approach breaks down as soon as the code is used multiple times with different options.  While that may seem unlikely in practice, it occurs in this documentation and may be expected to occur in other docs.}  LuaTeX could do better, by hashing the command and code together.  The Python script that provides XeTeX capabilities simply runs both the command and the code through a single sha1 hasher, but has the additional overhead of the |\write18| call and Python execution.
%
% One potential concern is that caching should also keep track of the command from which code originates.  What if identical code is highlighted with identical settings in both the |minted| environment and |\mintinline| command?  In both cases, what is actually saved by Pygments is identical.  The difference in final appearance is due to how the environment and command treat the Pygments output.
%
% Notice that the |verboptions| macros don't need separating commas, since they're assembled in such a way that they will always have a leading comma.
%
%    \begin{macrocode}
\newcommand{\minted@pygmentize}[2][\jobname.pyg]{%
  \minted@checklang
  \minted@set@autogobble
  \ifthenelse{\boolean{minted@autogobble}}%
    {\def\minted@codefile{\jobname.pyg}}%
    {\def\minted@codefile{#1}}%
  \def\minted@cmd{\MintedPygmentize\space -l #2
    -f latex -F tokenmerge
    \minted@optg \space \csname minted@optlang\minted@lang\endcsname
    \space \minted@optcmd \space -P "verboptions=\minted@getoptg{extra}%
      \minted@getoptlang{extra}\minted@getoptcmd{extra}"
    -o "\minted@outputdir\minted@infile" \space 
    "\minted@outputdir\minted@codefile"}%
  % For debugging, uncomment: %%%%
  % \immediate\typeout{\minted@cmd}%
  % %%%%
  \ifthenelse{\boolean{minted@cache}}%
    {%
      \ifx\XeTeXinterchartoks\minted@undefined
        \ifthenelse{\boolean{minted@autogobble}}%
          {\edef\minted@hash{\pdf@filemdfivesum{#1}%
            \pdf@mdfivesum{\minted@cmd autogobble}}}%
          {\edef\minted@hash{\pdf@filemdfivesum{#1}%
            \pdf@mdfivesum{\minted@cmd}}}%
      \else
        \immediate\openout\minted@code\jobname.mintedcmd\relax
        \immediate\write\minted@code{\minted@cmd}%
        \ifthenelse{\boolean{minted@autogobble}}%
          {\immediate\write\minted@code{autogobble}}{}%
        \immediate\closeout\minted@code
        %Cheating a little here by using ASCII codes to write `{` and `}`
        %in the Python code
        \def\minted@hashcmd{%
          \detokenize{python -c "import hashlib;
            hasher = hashlib.sha1();
            f = open(\"}\minted@outputdir\jobname.mintedcmd\detokenize{\", \"rb\");
            hasher.update(f.read());
            f.close();
            f = open(\"}\minted@outputdir#1\detokenize{\", \"rb\");
            hasher.update(f.read());
            f.close();
            f = open(\"}\minted@outputdir\jobname.mintedmd5\detokenize{\", \"w\");
            macro = \"\\edef\\minted@hash\" + chr(123) + hasher.hexdigest() + chr(125) + \"\";
            f.write(\"\\makeatletter\" + macro + \"\\makeatother\\endinput\n\");
            f.close();"}}%
        \immediate\write18{\minted@hashcmd}%
        \input{\minted@outputdir\jobname.mintedmd5}%
      \fi
      \ifwindows
        \edef\minted@infile{%
          \minted@cachedir@windows\@backslashchar\minted@hash.pygtex}%
      \else
        \edef\minted@infile{%
          \minted@cachedir/\minted@hash.pygtex}%
      \fi
      \IfFileExists{\minted@cachedir/\minted@hash.pygtex}{}{%
        \ifthenelse{\boolean{minted@autogobble}}{%
          %Need a version of open() that supports encoding under Python 2
          \edef\minted@autogobblecmd{%
            \detokenize{python -c "import sys;
            import textwrap;
            from io import open;
            f = open(\"}\minted@outputdir#1\detokenize{\", \"r\", encoding=\"}\minted@encoding\detokenize{\");
            t = f.read();
            f.close();
            f = open(\"}\minted@outputdir\jobname.pyg\detokenize{\", \"w\", encoding=\"}\minted@encoding\detokenize{\");
            f.write(textwrap.dedent(t));
            f.close();"}%
          }%
          \immediate\write18{\minted@autogobblecmd}}{}%
        \immediate\write18{\minted@cmd}}%
      \expandafter\minted@addcachefile\expandafter{\minted@hash.pygtex}%
      \minted@inputpyg}%
    {%
      \ifthenelse{\boolean{minted@autogobble}}{%
        %Need a version of open() that supports encoding under Python 2
        \edef\minted@autogobblecmd{%
          \detokenize{python -c "import sys;
          import textwrap;
          from io import open;
          f = open(\"}\minted@outputdir#1\detokenize{\", \"r\", encoding=\"}\minted@encoding\detokenize{\");
          t = f.read();
          f.close();
          f = open(\"}\minted@outputdir\jobname.pyg\detokenize{\", \"w\", encoding=\"}\minted@encoding\detokenize{\");
          f.write(textwrap.dedent(t));
          f.close();"}%
        }%
        \immediate\write18{\minted@autogobblecmd}}{}%
      \immediate\write18{\minted@cmd}%
      \minted@inputpyg}%
}
\newcommand{\minted@inputpyg}{%
  \ifthenelse{\equal{\minted@optcmd@bgcolor}{}}%
    {}%
    {\begin{minted@colorbg}{\minted@optcmd@bgcolor}}%
  \input{\minted@outputdir\minted@infile}%
  \ifthenelse{\equal{\minted@optcmd@bgcolor}{}}%
    {}%
    {\end{minted@colorbg}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% We need a way to have line counters on a per-language basis.
%
% \begin{macro}{\minted@langlinenoson}
%    \begin{macrocode}
\newcounter{minted@FancyVerbLineTemp}
\newcommand{\minted@langlinenoson}{%
  \ifcsname c@minted@lang\minted@lang\endcsname\else
    \newcounter{minted@lang\minted@lang}%
  \fi
  \setcounter{minted@FancyVerbLineTemp}{\value{FancyVerbLine}}%
  \setcounter{FancyVerbLine}{\value{minted@lang\minted@lang}}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\minted@langlinenosoff}
% 
%    \begin{macrocode}
\newcommand{\minted@langlinenosoff}{%
  \setcounter{minted@lang\minted@lang}{\value{FancyVerbLine}}%
  \setcounter{FancyVerbLine}{\value{minted@FancyVerbLineTemp}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% Disable the language-specific settings if the package option isn't used.
%    \begin{macrocode}
\ifthenelse{\boolean{minted@langlinenos}}{}{%
  \let\minted@langlinenoson\relax
  \let\minted@langlinenosoff\relax
}
%    \end{macrocode}
%
%
%
% \subsection{Public API}
%
% \begin{macro}{\setminted}
% Set global or language-level options.
%    \begin{macrocode}
\newcommand{\setminted}[2][]{%
  \ifthenelse{\equal{#1}{}}%
    {\setkeys{minted@optg}{#2}}%
    {\def\minted@lang{#1}\setkeys{minted@optlang}{#2}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\usemintedstyle}
% \changes{2.0}{2013/07/28}{Added optional argument for language}
% Set style.  This is a holdover from version 1, since |\setminted| can now accomplish this, and a hierarchy of style settings are now possible.
%    \begin{macrocode}
\newcommand{\usemintedstyle}[2][]{\setminted[#1]{style=#2}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\mintinline}
% Define an inline command.  This requires some catcode acrobatics.  The typical verbatim methods are not used.  Rather, a different approach is taken that is generally more robust when used within other commands (for example, when used in footnotes).
%
% Pygments saves code wrapped in a |Verbatim| environment.  Getting the inline command to work correctly require redefining |Verbatim| to be |BVerbatim| temporarily.  This approach would break if |BVerbatim| were ever redefined elsewhere.
%    \begin{macrocode}
\newrobustcmd{\mintinline}[2][]{%
  \minted@resetoptcmd
  \setkeys{minted@optcmd}{#1}%
  \def\minted@lang{#2}%
  \begingroup
  \let\do\@makeother\dospecials
  \catcode`\{=1
  \catcode`\}=2
  \catcode`\^^I=\active
  \@ifnextchar\bgroup
    {\minted@inline@iii}%
    {\catcode`\{=12\catcode`\}=12
      \minted@inline@i}}
\def\minted@inline@i#1{%
  \endgroup
  \def\minted@inline@ii##1#1{%
    \minted@inline@iii{##1}}%
  \begingroup
  \let\do\@makeother\dospecials  
  \minted@inline@ii}
\ifthenelse{\boolean{minted@draft}}%
  {\newcommand{\minted@inline@iii}[1]{%
    \endgroup
    \def\minted@argretok{%
      \begingroup
      \everyeof{\noexpand}%
      \endlinechar-1\relax
      \let\do\@makeother\dospecials
      \catcode`\ =\active
      \catcode`\^^I=\active
      \scantokens{#1}%
      \endgroup}%
    \begingroup
    \expandafter\fvset\expandafter{\minted@optg@extra}%
    \minted@checklang
    \expandafter\let\expandafter\minted@optlang@extra\csname minted@optlang\minted@lang @extra\endcsname
    \expandafter\fvset\expandafter{\minted@optlang@extra}%
    \expandafter\fvset\expandafter{\minted@optcmd@extra}%
    \FV@BeginVBox
    \frenchspacing
    \FV@SetupFont
    \FV@DefineWhiteSpace
    \FancyVerbDefineActive
    \FancyVerbFormatCom
    \FV@ObeyTabsInit
    \hbox{\FancyVerbFormatLine{\minted@argretok}}%
    \FV@EndVBox
    \endgroup}}%
  {\newcommand{\minted@inline@iii}[1]{%
    \endgroup
    \immediate\openout\minted@code\jobname.pyg\relax
    \immediate\write\minted@code{\detokenize{#1}}%
    \immediate\closeout\minted@code
    \begingroup
    \RecustomVerbatimEnvironment{Verbatim}{BVerbatim}{}%
    \minted@pygmentize{\minted@lang}%
    \endgroup}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\mint}
%
% Highlight a small piece of verbatim code (a single line).
%
% The |draft| version digs into a lot of \pkg{fancyvrb} internals.  The code is \emph{captured} using |\SaveVerb|.  But we want to \emph{typeset} it using |\UseVerbatim| rather than |\UseVerb|, and that doesn't work.  So we let the saved code to |\FV@Line|, which is the macro in which it would have been temporarily stored had it been read in a normal |Verbatim| environment.  Once this is done, using |\FV@PreProcessLine| will yield the properly processed version of |\FV@Line|.  Then it's just a matter of sticking this into the code that |\UseVerbatim| would have invoked (actually in |\FV@UseVerbatim|).  This includes a final
%\begin{verbatim}
%\@doendpe\global\@ignorefalse\ignorespaces
%\end{verbatim}
% which prevents any immediately following, adjacent text from starting a new paragraph.  Ultimately, this was a matter of tracking down the differences between |\UseVerb| and |\UseVerbatim|, and adding in the pieces from |\UseVerbatim| that were missing.
%
% We have to undefine the short verb twice, because we want it off as soon as possible, but that means undefining it inside a group, so it comes back as soon as we leave the group.
%    \begin{macrocode}
\ifthenelse{\boolean{minted@draft}}%
  {\newcommand{\mint}[3][]{%
    \def\minted@lang{#2}%
    \DefineShortVerb{#3}%
    \minted@resetoptcmd
    \setkeys{minted@optcmd}{#1}%
    \minted@langlinenoson
    \begingroup
    \expandafter\fvset\expandafter{\minted@optg@extra}%
    \minted@checklang
    \expandafter\let\expandafter\minted@optlang@extra\csname minted@optlang\minted@lang @extra\endcsname
    \expandafter\fvset\expandafter{\minted@optlang@extra}%
    \expandafter\fvset\expandafter{\minted@optcmd@extra}%
    \SaveVerb[aftersave={%
      \UndefineShortVerb{#3}%
      \let\FV@Line\FV@SV@minted@verb
      \FV@VerbatimBegin\FV@PreProcessLine\FV@VerbatimEnd
      \endgroup
      \UndefineShortVerb{#3}%
      \minted@langlinenosoff
      \@doendpe\global\@ignorefalse\ignorespaces}]{minted@verb}#3}}%
  {\newcommand{\mint}[3][]{%
    \def\minted@lang{#2}%
    \DefineShortVerb{#3}%
    \minted@resetoptcmd
    \setkeys{minted@optcmd}{#1}%
    \SaveVerb[aftersave={%
      \UndefineShortVerb{#3}%
      \minted@langlinenoson
      \minted@savecode{\FV@SV@minted@verb}%
      \minted@pygmentize{#2}%
      \minted@langlinenosoff}]{minted@verb}#3}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{environment}{minted}
% \changes{1.7}{2011/08/30}{Fixed \texttt{tabsize} option}
%
% Highlight a longer piece of code inside a verbatim environment.
%    \begin{macrocode}
\ifthenelse{\boolean{minted@draft}}%
  {\newenvironment{minted}[2][]
    {\VerbatimEnvironment
      \let\FVB@VerbatimOut\minted@FVB@VerbatimOut
      \def\minted@lang{#2}%
      \minted@resetoptcmd
      \setkeys{minted@optcmd}{#1}%
      \expandafter\fvset\expandafter{\minted@optg@extra}%
      \minted@checklang
      \expandafter\let\expandafter\minted@optlang@extra\csname minted@optlang\minted@lang @extra\endcsname
      \expandafter\fvset\expandafter{\minted@optlang@extra}%
      \expandafter\fvset\expandafter{\minted@optcmd@extra}%
      \minted@langlinenoson
      \begin{Verbatim}}%
    {\end{Verbatim}%
      \minted@langlinenosoff}}%
  {\newenvironment{minted}[2][]
    {\VerbatimEnvironment
      \let\FVB@VerbatimOut\minted@FVB@VerbatimOut
      \def\minted@lang{#2}%
      \minted@resetoptcmd
      \setkeys{minted@optcmd}{#1}%
      \begin{VerbatimOut}[codes={\catcode`\^^I=12}]{\jobname.pyg}}%
    {\end{VerbatimOut}%
        \minted@langlinenoson
        \minted@pygmentize{\minted@lang}%
        \minted@langlinenosoff}}
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\inputminted}
%
% Highlight an external source file.
%    \begin{macrocode}
\ifthenelse{\boolean{minted@draft}}%
  {\newcommand{\inputminted}[3][]{%
    \def\minted@lang{#2}%
    \minted@resetoptcmd
    \setkeys{minted@optcmd}{#1}%
    \begingroup
    \expandafter\fvset\expandafter{\minted@optg@extra}%
    \minted@checklang
    \expandafter\let\expandafter\minted@optlang@extra\csname minted@optlang\minted@lang @extra\endcsname
    \expandafter\fvset\expandafter{\minted@optlang@extra}%
    \expandafter\fvset\expandafter{\minted@optcmd@extra}%
    \VerbatimInput{#3}%
    \endgroup}}%
  {\newcommand{\inputminted}[3][]{%
    \def\minted@lang{#2}%
    \minted@resetoptcmd
    \setkeys{minted@optcmd}{#1}%
    \minted@pygmentize[#3]{#2}}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Command shortcuts}
%
% \changes{1.6}{2010/01/22}{Added command shortcuts}
%
% We allow the user to define shortcuts for the highlighting commands.
%
% \begin{macro}{\newminted}
%
% Define a new language-specific alias for the |minted| environment.
%
%    \begin{macrocode}
\newcommand{\newminted}[3][]{
%    \end{macrocode}
%
% First, we look whether a custom environment name was given as the first
% optional argument.
% If that's not the case, construct it from the language name (append ``|code|'').
%
%    \begin{macrocode}
  \ifthenelse{\equal{#1}{}}
    {\def\minted@envname{#2code}}
    {\def\minted@envname{#1}}
%    \end{macrocode}
%
% Now, we define two environments.
% The first takes no further arguments.
% The second, starred version, takes an extra argument that specifies option
% overrides.
%
%    \begin{macrocode}
  \newenvironment{\minted@envname}
    {\VerbatimEnvironment
      \begin{minted}[#3]{#2}}
    {\end{minted}}
  \newenvironment{\minted@envname *}[1]
    {\VerbatimEnvironment\begin{minted}[#3,##1]{#2}}
    {\end{minted}}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\newmint}
%
% Define a new language-specific alias for the |\mint| short form.
%    \begin{macrocode}
\newcommand{\newmint}[3][]{
%    \end{macrocode}
% Same as with |\newminted|, look whether an explicit name is provided.
% If not, take the language name as command name.
%    \begin{macrocode}
  \ifthenelse{\equal{#1}{}}
    {\def\minted@shortname{#2}}
    {\def\minted@shortname{#1}}
%    \end{macrocode}
% And define the macro.
%    \begin{macrocode}
  \expandafter\newcommand\csname\minted@shortname\endcsname[2][]{
    \mint[#3,##1]{#2}##2}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\newmintedfile}
%
% Define a new language-specific alias for |\inputminted|.
%    \begin{macrocode}
\newcommand{\newmintedfile}[3][]{
%    \end{macrocode}
% Here, the default macro name (if none is provided) appends ``|file|'' to the language name.
%    \begin{macrocode}
  \ifthenelse{\equal{#1}{}}
    {\def\minted@shortname{#2file}}
    {\def\minted@shortname{#1}}
%    \end{macrocode}
%
% \dots and define the macro.
%
%    \begin{macrocode}
  \expandafter\newcommand\csname\minted@shortname\endcsname[2][]{
    \inputminted[#3,##1]{#2}{##2}}}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\newmintinline}
% Define an alias for |\mintinline|.
%
% As is usual with inline commands, a little catcode trickery must be employed.
%    \begin{macrocode}
\newcommand{\newmintinline}[3][]{%
  \ifthenelse{\equal{#1}{}}%
    {\def\minted@shortname{#2inline}}%
    {\def\minted@shortname{#1}}%
    \expandafter\newrobustcmd\csname\minted@shortname\endcsname{%
      \begingroup
      \let\do\@makeother\dospecials
      \catcode`\{=1
      \catcode`\}=2
      \@ifnextchar[{\endgroup\minted@inliner[#3][#2]}%
        {\endgroup\minted@inliner[#3][#2][]}}%
    \def\minted@inliner[##1][##2][##3]{\mintinline[##1,##3]{##2}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Float support}
%
% \changes{0.1.5}{2010/01/10}{Added float support}
%
% \begin{environment}{listing}
%
% Define a new floating environment to use for floated listings.
%
%    \begin{macrocode}
\@ifundefined{minted@float@within}
  {\newfloat{listing}{h}{lol}}
  {\newfloat{listing}{h}{lol}[\minted@float@within]}
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\listingcaption}
%
% The name that is displayed before each individual listings caption and its number.
% The macro |\listingscaption| can be redefined by the user.
%
%    \begin{macrocode}
\newcommand{\listingscaption}{Listing}
%    \end{macrocode}
%
% The following definition should not be changed by the user.
%
%    \begin{macrocode}
\floatname{listing}{\listingscaption}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\listoflistingscaption}
%
% The caption that is displayed for the list of listings.
%
%    \begin{macrocode}
\newcommand{\listoflistingscaption}{List of listings}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\listoflistings}
%
% Used to produce a list of listings (like |\listoffigures| etc.).
% This may well clash with other packages (for example, \pkg{listings}) but we choose to ignore this
% since these two packages shouldn't be used together in the first place.
%
%    \begin{macrocode}
\providecommand{\listoflistings}{\listof{listing}{\listoflistingscaption}}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Epilogue}
%
% Check whether LaTeX was invoked with |-shell-escape| option, make sure |pygmentize| exists, and set the default style.
%
% \changes{1.7}{2011/01/21}{More robust detection of the \texttt{-shell-escape} option}
%    \begin{macrocode}
\AtEndOfPackage{%
  \ifthenelse{\boolean{minted@draft}}{}{%
    \ifnum\pdf@shellescape=1\relax\else
      \PackageError{minted}%
       {You must invoke LaTeX with the
        -shell-escape flag}%
       {Pass the -shell-escape flag to LaTeX. Refer to the minted.sty
        documentation for more information.}%
    \fi
    \TestAppExists{pygmentize}
    \ifAppExists\else
      \PackageError{minted}%
       {You must have `pygmentize' installed
        to use this package}%
       {Refer to the installation instructions in the minted
        documentation for more information.}%
    \fi
    \setminted{style=default}%
  }%
}
%    \end{macrocode}
%
%
%
% \subsection{Final cleanup}
%
% Clean up temp files.  What actually needs to be done depends on caching and engine.
%    \begin{macrocode}
\AtEndDocument{
  \ifx\XeTeXinterchartoks\minted@undefined
  \else
    \DeleteFile[\minted@outputdir]{\jobname.mintedcmd}%
    \DeleteFile[\minted@outputdir]{\jobname.mintedmd5}%
  \fi
  \DeleteFile[\minted@outputdir]{\jobname.pyg}%
  \DeleteFile[\minted@outputdir]{\jobname.out.pyg}%
}
%    \end{macrocode}
%
% \iffalse
%</package>
% \fi
%% \Finale
\endinput

